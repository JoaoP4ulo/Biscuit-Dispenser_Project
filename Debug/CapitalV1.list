
CapitalV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006938  08006938  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006938  08006938  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000024  08006964  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08006964  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011886  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d91  00000000  00000000  00031916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  000346a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc1  00000000  00000000  00035710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d9b  00000000  00000000  000363d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e85  00000000  00000000  0005016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000933e5  00000000  00000000  00064ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004668  00000000  00000000  000f83d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000fca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080068e0 	.word	0x080068e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080068e0 	.word	0x080068e0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2uiz>:
 80009f8:	004a      	lsls	r2, r1, #1
 80009fa:	d211      	bcs.n	8000a20 <__aeabi_d2uiz+0x28>
 80009fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a00:	d211      	bcs.n	8000a26 <__aeabi_d2uiz+0x2e>
 8000a02:	d50d      	bpl.n	8000a20 <__aeabi_d2uiz+0x28>
 8000a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a0c:	d40e      	bmi.n	8000a2c <__aeabi_d2uiz+0x34>
 8000a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_d2uiz+0x3a>
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0000 	mov.w	r0, #0
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_frsub>:
 8000a38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a3c:	e002      	b.n	8000a44 <__addsf3>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_fsub>:
 8000a40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a44 <__addsf3>:
 8000a44:	0042      	lsls	r2, r0, #1
 8000a46:	bf1f      	itttt	ne
 8000a48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a4c:	ea92 0f03 	teqne	r2, r3
 8000a50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a58:	d06a      	beq.n	8000b30 <__addsf3+0xec>
 8000a5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a62:	bfc1      	itttt	gt
 8000a64:	18d2      	addgt	r2, r2, r3
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	4048      	eorgt	r0, r1
 8000a6a:	4041      	eorgt	r1, r0
 8000a6c:	bfb8      	it	lt
 8000a6e:	425b      	neglt	r3, r3
 8000a70:	2b19      	cmp	r3, #25
 8000a72:	bf88      	it	hi
 8000a74:	4770      	bxhi	lr
 8000a76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a92:	bf18      	it	ne
 8000a94:	4249      	negne	r1, r1
 8000a96:	ea92 0f03 	teq	r2, r3
 8000a9a:	d03f      	beq.n	8000b1c <__addsf3+0xd8>
 8000a9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa0:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa4:	eb10 000c 	adds.w	r0, r0, ip
 8000aa8:	f1c3 0320 	rsb	r3, r3, #32
 8000aac:	fa01 f103 	lsl.w	r1, r1, r3
 8000ab0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	d502      	bpl.n	8000abc <__addsf3+0x78>
 8000ab6:	4249      	negs	r1, r1
 8000ab8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000abc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ac0:	d313      	bcc.n	8000aea <__addsf3+0xa6>
 8000ac2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac6:	d306      	bcc.n	8000ad6 <__addsf3+0x92>
 8000ac8:	0840      	lsrs	r0, r0, #1
 8000aca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ace:	f102 0201 	add.w	r2, r2, #1
 8000ad2:	2afe      	cmp	r2, #254	; 0xfe
 8000ad4:	d251      	bcs.n	8000b7a <__addsf3+0x136>
 8000ad6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ada:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ade:	bf08      	it	eq
 8000ae0:	f020 0001 	biceq.w	r0, r0, #1
 8000ae4:	ea40 0003 	orr.w	r0, r0, r3
 8000ae8:	4770      	bx	lr
 8000aea:	0049      	lsls	r1, r1, #1
 8000aec:	eb40 0000 	adc.w	r0, r0, r0
 8000af0:	3a01      	subs	r2, #1
 8000af2:	bf28      	it	cs
 8000af4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000af8:	d2ed      	bcs.n	8000ad6 <__addsf3+0x92>
 8000afa:	fab0 fc80 	clz	ip, r0
 8000afe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b02:	ebb2 020c 	subs.w	r2, r2, ip
 8000b06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b0a:	bfaa      	itet	ge
 8000b0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b10:	4252      	neglt	r2, r2
 8000b12:	4318      	orrge	r0, r3
 8000b14:	bfbc      	itt	lt
 8000b16:	40d0      	lsrlt	r0, r2
 8000b18:	4318      	orrlt	r0, r3
 8000b1a:	4770      	bx	lr
 8000b1c:	f092 0f00 	teq	r2, #0
 8000b20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b24:	bf06      	itte	eq
 8000b26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b2a:	3201      	addeq	r2, #1
 8000b2c:	3b01      	subne	r3, #1
 8000b2e:	e7b5      	b.n	8000a9c <__addsf3+0x58>
 8000b30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b38:	bf18      	it	ne
 8000b3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3e:	d021      	beq.n	8000b84 <__addsf3+0x140>
 8000b40:	ea92 0f03 	teq	r2, r3
 8000b44:	d004      	beq.n	8000b50 <__addsf3+0x10c>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	4608      	moveq	r0, r1
 8000b4e:	4770      	bx	lr
 8000b50:	ea90 0f01 	teq	r0, r1
 8000b54:	bf1c      	itt	ne
 8000b56:	2000      	movne	r0, #0
 8000b58:	4770      	bxne	lr
 8000b5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5e:	d104      	bne.n	8000b6a <__addsf3+0x126>
 8000b60:	0040      	lsls	r0, r0, #1
 8000b62:	bf28      	it	cs
 8000b64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6e:	bf3c      	itt	cc
 8000b70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bxcc	lr
 8000b76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b88:	bf16      	itet	ne
 8000b8a:	4608      	movne	r0, r1
 8000b8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b90:	4601      	movne	r1, r0
 8000b92:	0242      	lsls	r2, r0, #9
 8000b94:	bf06      	itte	eq
 8000b96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b9a:	ea90 0f01 	teqeq	r0, r1
 8000b9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_ui2f>:
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e004      	b.n	8000bb4 <__aeabi_i2f+0x8>
 8000baa:	bf00      	nop

08000bac <__aeabi_i2f>:
 8000bac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	bf48      	it	mi
 8000bb2:	4240      	negmi	r0, r0
 8000bb4:	ea5f 0c00 	movs.w	ip, r0
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	e01c      	b.n	8000c02 <__aeabi_l2f+0x2a>

08000bc8 <__aeabi_ul2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e00a      	b.n	8000bec <__aeabi_l2f+0x14>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_l2f>:
 8000bd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__aeabi_l2f+0x14>
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	ea5f 0c01 	movs.w	ip, r1
 8000bf0:	bf02      	ittt	eq
 8000bf2:	4684      	moveq	ip, r0
 8000bf4:	4601      	moveq	r1, r0
 8000bf6:	2000      	moveq	r0, #0
 8000bf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bfc:	bf08      	it	eq
 8000bfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c06:	fabc f28c 	clz	r2, ip
 8000c0a:	3a08      	subs	r2, #8
 8000c0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c10:	db10      	blt.n	8000c34 <__aeabi_l2f+0x5c>
 8000c12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c16:	4463      	add	r3, ip
 8000c18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1c:	f1c2 0220 	rsb	r2, r2, #32
 8000c20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c24:	fa20 f202 	lsr.w	r2, r0, r2
 8000c28:	eb43 0002 	adc.w	r0, r3, r2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f102 0220 	add.w	r2, r2, #32
 8000c38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3c:	f1c2 0220 	rsb	r2, r2, #32
 8000c40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c44:	fa21 f202 	lsr.w	r2, r1, r2
 8000c48:	eb43 0002 	adc.w	r0, r3, r2
 8000c4c:	bf08      	it	eq
 8000c4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_fmul>:
 8000c54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c62:	ea92 0f0c 	teqne	r2, ip
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d06f      	beq.n	8000d4c <__aeabi_fmul+0xf8>
 8000c6c:	441a      	add	r2, r3
 8000c6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c72:	0240      	lsls	r0, r0, #9
 8000c74:	bf18      	it	ne
 8000c76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c7a:	d01e      	beq.n	8000cba <__aeabi_fmul+0x66>
 8000c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c88:	fba0 3101 	umull	r3, r1, r0, r1
 8000c8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c94:	bf3e      	ittt	cc
 8000c96:	0049      	lslcc	r1, r1, #1
 8000c98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c9c:	005b      	lslcc	r3, r3, #1
 8000c9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ca2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca6:	2afd      	cmp	r2, #253	; 0xfd
 8000ca8:	d81d      	bhi.n	8000ce6 <__aeabi_fmul+0x92>
 8000caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb2:	bf08      	it	eq
 8000cb4:	f020 0001 	biceq.w	r0, r0, #1
 8000cb8:	4770      	bx	lr
 8000cba:	f090 0f00 	teq	r0, #0
 8000cbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cc2:	bf08      	it	eq
 8000cc4:	0249      	lsleq	r1, r1, #9
 8000cc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cce:	3a7f      	subs	r2, #127	; 0x7f
 8000cd0:	bfc2      	ittt	gt
 8000cd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cda:	4770      	bxgt	lr
 8000cdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	dc5d      	bgt.n	8000da4 <__aeabi_fmul+0x150>
 8000ce8:	f112 0f19 	cmn.w	r2, #25
 8000cec:	bfdc      	itt	le
 8000cee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cf2:	4770      	bxle	lr
 8000cf4:	f1c2 0200 	rsb	r2, r2, #0
 8000cf8:	0041      	lsls	r1, r0, #1
 8000cfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfe:	f1c2 0220 	rsb	r2, r2, #32
 8000d02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d0a:	f140 0000 	adc.w	r0, r0, #0
 8000d0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d12:	bf08      	it	eq
 8000d14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d18:	4770      	bx	lr
 8000d1a:	f092 0f00 	teq	r2, #0
 8000d1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d22:	bf02      	ittt	eq
 8000d24:	0040      	lsleq	r0, r0, #1
 8000d26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d2a:	3a01      	subeq	r2, #1
 8000d2c:	d0f9      	beq.n	8000d22 <__aeabi_fmul+0xce>
 8000d2e:	ea40 000c 	orr.w	r0, r0, ip
 8000d32:	f093 0f00 	teq	r3, #0
 8000d36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3a:	bf02      	ittt	eq
 8000d3c:	0049      	lsleq	r1, r1, #1
 8000d3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d42:	3b01      	subeq	r3, #1
 8000d44:	d0f9      	beq.n	8000d3a <__aeabi_fmul+0xe6>
 8000d46:	ea41 010c 	orr.w	r1, r1, ip
 8000d4a:	e78f      	b.n	8000c6c <__aeabi_fmul+0x18>
 8000d4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d50:	ea92 0f0c 	teq	r2, ip
 8000d54:	bf18      	it	ne
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d00a      	beq.n	8000d72 <__aeabi_fmul+0x11e>
 8000d5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d60:	bf18      	it	ne
 8000d62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	d1d8      	bne.n	8000d1a <__aeabi_fmul+0xc6>
 8000d68:	ea80 0001 	eor.w	r0, r0, r1
 8000d6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f090 0f00 	teq	r0, #0
 8000d76:	bf17      	itett	ne
 8000d78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d7c:	4608      	moveq	r0, r1
 8000d7e:	f091 0f00 	teqne	r1, #0
 8000d82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d86:	d014      	beq.n	8000db2 <__aeabi_fmul+0x15e>
 8000d88:	ea92 0f0c 	teq	r2, ip
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_fmul+0x13e>
 8000d8e:	0242      	lsls	r2, r0, #9
 8000d90:	d10f      	bne.n	8000db2 <__aeabi_fmul+0x15e>
 8000d92:	ea93 0f0c 	teq	r3, ip
 8000d96:	d103      	bne.n	8000da0 <__aeabi_fmul+0x14c>
 8000d98:	024b      	lsls	r3, r1, #9
 8000d9a:	bf18      	it	ne
 8000d9c:	4608      	movne	r0, r1
 8000d9e:	d108      	bne.n	8000db2 <__aeabi_fmul+0x15e>
 8000da0:	ea80 0001 	eor.w	r0, r0, r1
 8000da4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	4770      	bx	lr
 8000db2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fdiv>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d069      	beq.n	8000ea8 <__aeabi_fdiv+0xec>
 8000dd4:	eba2 0203 	sub.w	r2, r2, r3
 8000dd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ddc:	0249      	lsls	r1, r1, #9
 8000dde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000de2:	d037      	beq.n	8000e54 <__aeabi_fdiv+0x98>
 8000de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	428b      	cmp	r3, r1
 8000df6:	bf38      	it	cc
 8000df8:	005b      	lslcc	r3, r3, #1
 8000dfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e02:	428b      	cmp	r3, r1
 8000e04:	bf24      	itt	cs
 8000e06:	1a5b      	subcs	r3, r3, r1
 8000e08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1e:	bf24      	itt	cs
 8000e20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e2c:	bf24      	itt	cs
 8000e2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	bf18      	it	ne
 8000e3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3e:	d1e0      	bne.n	8000e02 <__aeabi_fdiv+0x46>
 8000e40:	2afd      	cmp	r2, #253	; 0xfd
 8000e42:	f63f af50 	bhi.w	8000ce6 <__aeabi_fmul+0x92>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5c:	327f      	adds	r2, #127	; 0x7f
 8000e5e:	bfc2      	ittt	gt
 8000e60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e68:	4770      	bxgt	lr
 8000e6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	3a01      	subs	r2, #1
 8000e74:	e737      	b.n	8000ce6 <__aeabi_fmul+0x92>
 8000e76:	f092 0f00 	teq	r2, #0
 8000e7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0040      	lsleq	r0, r0, #1
 8000e82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e86:	3a01      	subeq	r2, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fdiv+0xc2>
 8000e8a:	ea40 000c 	orr.w	r0, r0, ip
 8000e8e:	f093 0f00 	teq	r3, #0
 8000e92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0049      	lsleq	r1, r1, #1
 8000e9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9e:	3b01      	subeq	r3, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fdiv+0xda>
 8000ea2:	ea41 010c 	orr.w	r1, r1, ip
 8000ea6:	e795      	b.n	8000dd4 <__aeabi_fdiv+0x18>
 8000ea8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eac:	ea92 0f0c 	teq	r2, ip
 8000eb0:	d108      	bne.n	8000ec4 <__aeabi_fdiv+0x108>
 8000eb2:	0242      	lsls	r2, r0, #9
 8000eb4:	f47f af7d 	bne.w	8000db2 <__aeabi_fmul+0x15e>
 8000eb8:	ea93 0f0c 	teq	r3, ip
 8000ebc:	f47f af70 	bne.w	8000da0 <__aeabi_fmul+0x14c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e776      	b.n	8000db2 <__aeabi_fmul+0x15e>
 8000ec4:	ea93 0f0c 	teq	r3, ip
 8000ec8:	d104      	bne.n	8000ed4 <__aeabi_fdiv+0x118>
 8000eca:	024b      	lsls	r3, r1, #9
 8000ecc:	f43f af4c 	beq.w	8000d68 <__aeabi_fmul+0x114>
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e76e      	b.n	8000db2 <__aeabi_fmul+0x15e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	d1ca      	bne.n	8000e76 <__aeabi_fdiv+0xba>
 8000ee0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee4:	f47f af5c 	bne.w	8000da0 <__aeabi_fmul+0x14c>
 8000ee8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eec:	f47f af3c 	bne.w	8000d68 <__aeabi_fmul+0x114>
 8000ef0:	e75f      	b.n	8000db2 <__aeabi_fmul+0x15e>
 8000ef2:	bf00      	nop

08000ef4 <__gesf2>:
 8000ef4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef8:	e006      	b.n	8000f08 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__lesf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	e002      	b.n	8000f08 <__cmpsf2+0x4>
 8000f02:	bf00      	nop

08000f04 <__cmpsf2>:
 8000f04:	f04f 0c01 	mov.w	ip, #1
 8000f08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f18:	bf18      	it	ne
 8000f1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f1e:	d011      	beq.n	8000f44 <__cmpsf2+0x40>
 8000f20:	b001      	add	sp, #4
 8000f22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f26:	bf18      	it	ne
 8000f28:	ea90 0f01 	teqne	r0, r1
 8000f2c:	bf58      	it	pl
 8000f2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f32:	bf88      	it	hi
 8000f34:	17c8      	asrhi	r0, r1, #31
 8000f36:	bf38      	it	cc
 8000f38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f3c:	bf18      	it	ne
 8000f3e:	f040 0001 	orrne.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f48:	d102      	bne.n	8000f50 <__cmpsf2+0x4c>
 8000f4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f4e:	d105      	bne.n	8000f5c <__cmpsf2+0x58>
 8000f50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f54:	d1e4      	bne.n	8000f20 <__cmpsf2+0x1c>
 8000f56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f5a:	d0e1      	beq.n	8000f20 <__cmpsf2+0x1c>
 8000f5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__aeabi_cfrcmple>:
 8000f64:	4684      	mov	ip, r0
 8000f66:	4608      	mov	r0, r1
 8000f68:	4661      	mov	r1, ip
 8000f6a:	e7ff      	b.n	8000f6c <__aeabi_cfcmpeq>

08000f6c <__aeabi_cfcmpeq>:
 8000f6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f6e:	f7ff ffc9 	bl	8000f04 <__cmpsf2>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	bf48      	it	mi
 8000f76:	f110 0f00 	cmnmi.w	r0, #0
 8000f7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f7c <__aeabi_fcmpeq>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff fff4 	bl	8000f6c <__aeabi_cfcmpeq>
 8000f84:	bf0c      	ite	eq
 8000f86:	2001      	moveq	r0, #1
 8000f88:	2000      	movne	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmplt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffea 	bl	8000f6c <__aeabi_cfcmpeq>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_fcmple>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff ffe0 	bl	8000f6c <__aeabi_cfcmpeq>
 8000fac:	bf94      	ite	ls
 8000fae:	2001      	movls	r0, #1
 8000fb0:	2000      	movhi	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_fcmpge>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff ffd2 	bl	8000f64 <__aeabi_cfrcmple>
 8000fc0:	bf94      	ite	ls
 8000fc2:	2001      	movls	r0, #1
 8000fc4:	2000      	movhi	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmpgt>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffc8 	bl	8000f64 <__aeabi_cfrcmple>
 8000fd4:	bf34      	ite	cc
 8000fd6:	2001      	movcc	r0, #1
 8000fd8:	2000      	movcs	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2uiz>:
 8000fe0:	0042      	lsls	r2, r0, #1
 8000fe2:	d20e      	bcs.n	8001002 <__aeabi_f2uiz+0x22>
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30b      	bcc.n	8001002 <__aeabi_f2uiz+0x22>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d409      	bmi.n	8001008 <__aeabi_f2uiz+0x28>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	fa23 f002 	lsr.w	r0, r3, r2
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2uiz+0x32>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d102      	bne.n	8001018 <__aeabi_f2uiz+0x38>
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	4770      	bx	lr
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <MX_ADC1_Init+0xd0>)
 8001034:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001040:	2200      	movs	r2, #0
 8001042:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <MX_ADC1_Init+0xcc>)
 800104c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001050:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <MX_ADC1_Init+0xcc>)
 800105a:	2204      	movs	r2, #4
 800105c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105e:	4823      	ldr	r0, [pc, #140]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001060:	f001 fcfc 	bl	8002a5c <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800106a:	f001 f9ab 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2301      	movs	r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001076:	2307      	movs	r3, #7
 8001078:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <MX_ADC1_Init+0xcc>)
 8001080:	f001 ffc8 	bl	8003014 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f001 f99b 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001092:	2302      	movs	r3, #2
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4814      	ldr	r0, [pc, #80]	; (80010ec <MX_ADC1_Init+0xcc>)
 800109c:	f001 ffba 	bl	8003014 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010a6:	f001 f98d 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ae:	2303      	movs	r3, #3
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_ADC1_Init+0xcc>)
 80010b8:	f001 ffac 	bl	8003014 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010c2:	f001 f97f 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010c6:	2303      	movs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_ADC1_Init+0xcc>)
 80010d4:	f001 ff9e 	bl	8003014 <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80010de:	f001 f971 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000040 	.word	0x20000040
 80010f0:	40012400 	.word	0x40012400

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <HAL_ADC_MspInit+0xcc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d151      	bne.n	80011b8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_ADC_MspInit+0xd0>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001144:	230f      	movs	r3, #15
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	481d      	ldr	r0, [pc, #116]	; (80011c8 <HAL_ADC_MspInit+0xd4>)
 8001154:	f002 fdc0 	bl	8003cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0xdc>)
 800115c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001176:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 800118e:	f002 fb01 	bl	8003794 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001198:	f001 f914 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 80011a0:	621a      	str	r2, [r3, #32]
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_ADC_MspInit+0xd8>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2012      	movs	r0, #18
 80011ae:	f002 faba 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011b2:	2012      	movs	r0, #18
 80011b4:	f002 fad3 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40012400 	.word	0x40012400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	20000070 	.word	0x20000070
 80011d0:	40020008 	.word	0x40020008

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA_Init+0x38>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <MX_DMA_Init+0x38>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DMA_Init+0x38>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	200b      	movs	r0, #11
 80011f8:	f002 fa95 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011fc:	200b      	movs	r0, #11
 80011fe:	f002 faae 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b5d      	ldr	r3, [pc, #372]	; (800139c <MX_GPIO_Init+0x18c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a5c      	ldr	r2, [pc, #368]	; (800139c <MX_GPIO_Init+0x18c>)
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b5a      	ldr	r3, [pc, #360]	; (800139c <MX_GPIO_Init+0x18c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b57      	ldr	r3, [pc, #348]	; (800139c <MX_GPIO_Init+0x18c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a56      	ldr	r2, [pc, #344]	; (800139c <MX_GPIO_Init+0x18c>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b54      	ldr	r3, [pc, #336]	; (800139c <MX_GPIO_Init+0x18c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <MX_GPIO_Init+0x18c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <MX_GPIO_Init+0x18c>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <MX_GPIO_Init+0x18c>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <MX_GPIO_Init+0x18c>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a4a      	ldr	r2, [pc, #296]	; (800139c <MX_GPIO_Init+0x18c>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <MX_GPIO_Init+0x18c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4845      	ldr	r0, [pc, #276]	; (80013a0 <MX_GPIO_Init+0x190>)
 800128c:	f002 fea8 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|MOTOR_Pin|SI_ENABLE_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2119      	movs	r1, #25
 8001294:	4843      	ldr	r0, [pc, #268]	; (80013a4 <MX_GPIO_Init+0x194>)
 8001296:	f002 fea3 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX_GPIO_Port, AUX_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4841      	ldr	r0, [pc, #260]	; (80013a8 <MX_GPIO_Init+0x198>)
 80012a2:	f002 fe9d 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4838      	ldr	r0, [pc, #224]	; (80013a0 <MX_GPIO_Init+0x190>)
 80012c0:	f002 fd0a 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	4832      	ldr	r0, [pc, #200]	; (80013a0 <MX_GPIO_Init+0x190>)
 80012d6:	f002 fcff 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012da:	f641 1310 	movw	r3, #6416	; 0x1910
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	482f      	ldr	r0, [pc, #188]	; (80013a8 <MX_GPIO_Init+0x198>)
 80012ec:	f002 fcf4 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|MOTOR_Pin|SI_ENABLE_Pin;
 80012f0:	2319      	movs	r3, #25
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <MX_GPIO_Init+0x194>)
 8001308:	f002 fce6 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800130c:	f243 0306 	movw	r3, #12294	; 0x3006
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <MX_GPIO_Init+0x194>)
 800131e:	f002 fcdb 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SI1_Pin|SI2_Pin|BOTAO2_Pin|BOTAO1_Pin
 8001322:	f64c 4320 	movw	r3, #52256	; 0xcc20
 8001326:	613b      	str	r3, [r7, #16]
                          |ZEROCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_GPIO_Init+0x19c>)
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	481b      	ldr	r0, [pc, #108]	; (80013a4 <MX_GPIO_Init+0x194>)
 8001338:	f002 fcce 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX_Pin;
 800133c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2302      	movs	r3, #2
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_GPIO_Init+0x198>)
 8001356:	f002 fcbf 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZEROCD_DR_Pin;
 800135a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZEROCD_DR_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_GPIO_Init+0x194>)
 8001370:	f002 fcb2 	bl	8003cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2017      	movs	r0, #23
 800137a:	f002 f9d4 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800137e:	2017      	movs	r0, #23
 8001380:	f002 f9ed 	bl	800375e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2028      	movs	r0, #40	; 0x28
 800138a:	f002 f9cc 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138e:	2028      	movs	r0, #40	; 0x28
 8001390:	f002 f9e5 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40010800 	.word	0x40010800
 80013ac:	10110000 	.word	0x10110000

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f001 facb 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 fd9f 	bl	8001efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f7ff ff27 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f7ff ff07 	bl	80011d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80013c6:	f7ff fe2b 	bl	8001020 <MX_ADC1_Init>
  MX_SPI1_Init();
 80013ca:	f001 f801 	bl	80023d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013ce:	f001 fa1b 	bl	8002808 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80013d2:	f001 f933 	bl	800263c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */




	HAL_TIM_Base_Start(&htim4);
 80013d6:	4899      	ldr	r0, [pc, #612]	; (800163c <main+0x28c>)
 80013d8:	f003 fd96 	bl	8004f08 <HAL_TIM_Base_Start>


	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80013dc:	2100      	movs	r1, #0
 80013de:	4897      	ldr	r0, [pc, #604]	; (800163c <main+0x28c>)
 80013e0:	f003 fe34 	bl	800504c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4895      	ldr	r0, [pc, #596]	; (800163c <main+0x28c>)
 80013e8:	f003 fe30 	bl	800504c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80013ec:	2108      	movs	r1, #8
 80013ee:	4893      	ldr	r0, [pc, #588]	; (800163c <main+0x28c>)
 80013f0:	f003 fe2c 	bl	800504c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80013f4:	4b91      	ldr	r3, [pc, #580]	; (800163c <main+0x28c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80013fc:	4b8f      	ldr	r3, [pc, #572]	; (800163c <main+0x28c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001404:	4b8d      	ldr	r3, [pc, #564]	; (800163c <main+0x28c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c

	
	

	HAL_ADCEx_Calibration_Start(&hadc1);
 800140c:	488c      	ldr	r0, [pc, #560]	; (8001640 <main+0x290>)
 800140e:	f001 fffb 	bl	8003408 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCReadings, ANALOG_READS);
 8001412:	2204      	movs	r2, #4
 8001414:	498b      	ldr	r1, [pc, #556]	; (8001644 <main+0x294>)
 8001416:	488a      	ldr	r0, [pc, #552]	; (8001640 <main+0x290>)
 8001418:	f001 fbf8 	bl	8002c0c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		timer_curr = HAL_GetTick();
 800141c:	f001 faf0 	bl	8002a00 <HAL_GetTick>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <main+0x298>)
 8001426:	801a      	strh	r2, [r3, #0]

		

	/* ------------------------------------Start - ADC Reading-----------------------------------------------*/

		timer_diff = timer_curr - timer_bfr;
 8001428:	4b87      	ldr	r3, [pc, #540]	; (8001648 <main+0x298>)
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	4b87      	ldr	r3, [pc, #540]	; (800164c <main+0x29c>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b86      	ldr	r3, [pc, #536]	; (8001650 <main+0x2a0>)
 8001436:	801a      	strh	r2, [r3, #0]

		if (timer_diff >= 5){ // a cada 5ms é feito a leitura das portas ADC
 8001438:	4b85      	ldr	r3, [pc, #532]	; (8001650 <main+0x2a0>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d967      	bls.n	8001510 <main+0x160>

			if(ADC_Complete) {
 8001440:	4b84      	ldr	r3, [pc, #528]	; (8001654 <main+0x2a4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05f      	beq.n	8001508 <main+0x158>

				ADC_Complete = false;
 8001448:	4b82      	ldr	r3, [pc, #520]	; (8001654 <main+0x2a4>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Stop_DMA(&hadc1);
 800144e:	487c      	ldr	r0, [pc, #496]	; (8001640 <main+0x290>)
 8001450:	f001 fcba 	bl	8002dc8 <HAL_ADC_Stop_DMA>

				for(int i = 0 ; i < ANALOG_READS; i++){
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e00a      	b.n	8001470 <main+0xc0>
					anBuff[i] = ADCReadings[i];
 800145a:	4a7a      	ldr	r2, [pc, #488]	; (8001644 <main+0x294>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001462:	497d      	ldr	r1, [pc, #500]	; (8001658 <main+0x2a8>)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i = 0 ; i < ANALOG_READS; i++){
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b03      	cmp	r3, #3
 8001474:	ddf1      	ble.n	800145a <main+0xaa>
				}
					

				leituraAN2[ADC_ContRead] = anBuff[1];
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <main+0x2a8>)
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <main+0x2ac>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	b289      	uxth	r1, r1
 8001482:	4b77      	ldr	r3, [pc, #476]	; (8001660 <main+0x2b0>)
 8001484:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if(ADC_ContRead == (QTD_MEDIA-1)) {
 8001488:	4b74      	ldr	r3, [pc, #464]	; (800165c <main+0x2ac>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	2b63      	cmp	r3, #99	; 0x63
 800148e:	d103      	bne.n	8001498 <main+0xe8>
					ADC_ContRead = 0;
 8001490:	4b72      	ldr	r3, [pc, #456]	; (800165c <main+0x2ac>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <main+0xf4>
				} else {
					ADC_ContRead++;
 8001498:	4b70      	ldr	r3, [pc, #448]	; (800165c <main+0x2ac>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b6e      	ldr	r3, [pc, #440]	; (800165c <main+0x2ac>)
 80014a2:	801a      	strh	r2, [r3, #0]
				}

				//Média

				valorMassaAux2 = 0;
 80014a4:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <main+0x2b4>)
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < QTD_MEDIA; i++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	e014      	b.n	80014dc <main+0x12c>
					valorMassaAux2 += (float)leituraAN2[i];
 80014b2:	4a6b      	ldr	r2, [pc, #428]	; (8001660 <main+0x2b0>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb72 	bl	8000ba4 <__aeabi_ui2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b68      	ldr	r3, [pc, #416]	; (8001664 <main+0x2b4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f7ff fabb 	bl	8000a44 <__addsf3>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <main+0x2b4>)
 80014d4:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < QTD_MEDIA; i++) {
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b63      	cmp	r3, #99	; 0x63
 80014e0:	dde7      	ble.n	80014b2 <main+0x102>
				}

				valorMassaAux2 = valorMassaAux2/(float)QTD_MEDIA;
 80014e2:	4b60      	ldr	r3, [pc, #384]	; (8001664 <main+0x2b4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4960      	ldr	r1, [pc, #384]	; (8001668 <main+0x2b8>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc67 	bl	8000dbc <__aeabi_fdiv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <main+0x2b4>)
 80014f4:	601a      	str	r2, [r3, #0]

				peso = valorMassaAux2;
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <main+0x2b4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5c      	ldr	r2, [pc, #368]	; (800166c <main+0x2bc>)
 80014fc:	6013      	str	r3, [r2, #0]


				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCReadings, ANALOG_READS);
 80014fe:	2204      	movs	r2, #4
 8001500:	4950      	ldr	r1, [pc, #320]	; (8001644 <main+0x294>)
 8001502:	484f      	ldr	r0, [pc, #316]	; (8001640 <main+0x290>)
 8001504:	f001 fb82 	bl	8002c0c <HAL_ADC_Start_DMA>
					
			}
			timer_bfr = timer_curr;
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <main+0x298>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <main+0x29c>)
 800150e:	801a      	strh	r2, [r3, #0]

	/* ------------------------------------Stop - ADC Reading-----------------------------------------------*/

	/* ------------------------------------SI_ENABLE SET OFF-----------------------------------------------*/

		HAL_GPIO_WritePin(SI_ENABLE_GPIO_Port, SI_ENABLE_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2110      	movs	r1, #16
 8001514:	4856      	ldr	r0, [pc, #344]	; (8001670 <main+0x2c0>)
 8001516:	f002 fd63 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800151a:	200a      	movs	r0, #10
 800151c:	f001 fa7a 	bl	8002a14 <HAL_Delay>

	/* ----------------------------------------------------------------------------------------------------*/

	/* ------------------------------------Start - IHM Communication-----------------------------------------*/

		timer_diff2 = timer_curr - timer_bfr2;
 8001520:	4b49      	ldr	r3, [pc, #292]	; (8001648 <main+0x298>)
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <main+0x2c4>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b52      	ldr	r3, [pc, #328]	; (8001678 <main+0x2c8>)
 800152e:	801a      	strh	r2, [r3, #0]
		// 	timer_bfr2 = timer_curr;
		// }

			

			if(rxOK) {
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <main+0x2cc>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 811a 	beq.w	800176e <main+0x3be>

				// Recebendo valores Display Nextion
				if(rxBuf[0]==0xff){
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <main+0x2d0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	f040 8111 	bne.w	8001766 <main+0x3b6>
					flag = 0;
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <main+0x2d4>)
 8001546:	2200      	movs	r2, #0
 8001548:	801a      	strh	r2, [r3, #0]

					switch(rxBuf[1]) {
 800154a:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <main+0x2d0>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	3be0      	subs	r3, #224	; 0xe0
 8001550:	2b1a      	cmp	r3, #26
 8001552:	f200 8105 	bhi.w	8001760 <main+0x3b0>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <main+0x1ac>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015d9 	.word	0x080015d9
 8001560:	08001761 	.word	0x08001761
 8001564:	08001761 	.word	0x08001761
 8001568:	08001761 	.word	0x08001761
 800156c:	08001761 	.word	0x08001761
 8001570:	08001761 	.word	0x08001761
 8001574:	08001761 	.word	0x08001761
 8001578:	08001761 	.word	0x08001761
 800157c:	08001761 	.word	0x08001761
 8001580:	08001761 	.word	0x08001761
 8001584:	08001761 	.word	0x08001761
 8001588:	08001761 	.word	0x08001761
 800158c:	08001761 	.word	0x08001761
 8001590:	08001761 	.word	0x08001761
 8001594:	08001761 	.word	0x08001761
 8001598:	08001761 	.word	0x08001761
 800159c:	08001613 	.word	0x08001613
 80015a0:	08001699 	.word	0x08001699
 80015a4:	080016c1 	.word	0x080016c1
 80015a8:	080016e9 	.word	0x080016e9
 80015ac:	08001711 	.word	0x08001711
 80015b0:	08001739 	.word	0x08001739
 80015b4:	08001761 	.word	0x08001761
 80015b8:	08001761 	.word	0x08001761
 80015bc:	08001761 	.word	0x08001761
 80015c0:	08001761 	.word	0x08001761
 80015c4:	080015c9 	.word	0x080015c9
						case 0xfa:
							page = rxBuf[2];
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <main+0x2d0>)
 80015ca:	789a      	ldrb	r2, [r3, #2]
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <main+0x2d8>)
 80015ce:	701a      	strb	r2, [r3, #0]
							flag = 1;
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <main+0x2d4>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	801a      	strh	r2, [r3, #0]
							
							break;
 80015d6:	e0c3      	b.n	8001760 <main+0x3b0>

						case 0xe0: // Calibração
							if(rxBuf[2] == 0) { // Tara
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <main+0x2d0>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <main+0x23a>
								pesoTara = peso;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <main+0x2bc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a29      	ldr	r2, [pc, #164]	; (800168c <main+0x2dc>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e00f      	b.n	800160a <main+0x25a>
							} else { // Padrão
								pesoPadrao = peso;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <main+0x2bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <main+0x2e0>)
 80015f0:	6013      	str	r3, [r2, #0]

								// set level baixo PWM
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <main+0x28c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <main+0x28c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <main+0x28c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c
							}
							flag = 2;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <main+0x2d4>)
 800160c:	2202      	movs	r2, #2
 800160e:	801a      	strh	r2, [r3, #0]
							break;
 8001610:	e0a6      	b.n	8001760 <main+0x3b0>

						case 0xf0:

							pesoLimite1 = rxBuf[3];
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <main+0x2d0>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <main+0x2e4>)
 800161a:	801a      	strh	r2, [r3, #0]
							pesoLimite1 = rxBuf[2] + (pesoLimite1<<8);
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <main+0x2d0>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <main+0x2e4>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <main+0x2e4>)
 8001630:	801a      	strh	r2, [r3, #0]
							flag = 3;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <main+0x2d4>)
 8001634:	2203      	movs	r2, #3
 8001636:	801a      	strh	r2, [r3, #0]
							break;
 8001638:	e092      	b.n	8001760 <main+0x3b0>
 800163a:	bf00      	nop
 800163c:	20000270 	.word	0x20000270
 8001640:	20000040 	.word	0x20000040
 8001644:	200000b4 	.word	0x200000b4
 8001648:	200001ba 	.word	0x200001ba
 800164c:	200001b4 	.word	0x200001b4
 8001650:	20000212 	.word	0x20000212
 8001654:	200000d4 	.word	0x200000d4
 8001658:	200000c4 	.word	0x200000c4
 800165c:	200000e8 	.word	0x200000e8
 8001660:	200000ec 	.word	0x200000ec
 8001664:	200000d8 	.word	0x200000d8
 8001668:	42c80000 	.word	0x42c80000
 800166c:	200000e0 	.word	0x200000e0
 8001670:	40010c00 	.word	0x40010c00
 8001674:	200001b6 	.word	0x200001b6
 8001678:	20000214 	.word	0x20000214
 800167c:	200000de 	.word	0x200000de
 8001680:	200001bc 	.word	0x200001bc
 8001684:	20000016 	.word	0x20000016
 8001688:	200000df 	.word	0x200000df
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004
 8001694:	20000008 	.word	0x20000008

						case 0xf1:
							pesoLimite2 = rxBuf[3];
 8001698:	4b73      	ldr	r3, [pc, #460]	; (8001868 <main+0x4b8>)
 800169a:	78db      	ldrb	r3, [r3, #3]
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <main+0x4bc>)
 80016a0:	801a      	strh	r2, [r3, #0]
							pesoLimite2 = rxBuf[2] + (pesoLimite2<<8);
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <main+0x4b8>)
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <main+0x4bc>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b6d      	ldr	r3, [pc, #436]	; (800186c <main+0x4bc>)
 80016b6:	801a      	strh	r2, [r3, #0]
							flag = 4;
 80016b8:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <main+0x4c0>)
 80016ba:	2204      	movs	r2, #4
 80016bc:	801a      	strh	r2, [r3, #0]
							break;
 80016be:	e04f      	b.n	8001760 <main+0x3b0>
						case 0xf2:
							pesoLimite3 = rxBuf[3];
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <main+0x4b8>)
 80016c2:	78db      	ldrb	r3, [r3, #3]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <main+0x4c4>)
 80016c8:	801a      	strh	r2, [r3, #0]
							pesoLimite3 = rxBuf[2] + (pesoLimite3<<8);
 80016ca:	4b67      	ldr	r3, [pc, #412]	; (8001868 <main+0x4b8>)
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <main+0x4c4>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b65      	ldr	r3, [pc, #404]	; (8001874 <main+0x4c4>)
 80016de:	801a      	strh	r2, [r3, #0]
							flag = 5;
 80016e0:	4b63      	ldr	r3, [pc, #396]	; (8001870 <main+0x4c0>)
 80016e2:	2205      	movs	r2, #5
 80016e4:	801a      	strh	r2, [r3, #0]
							break;
 80016e6:	e03b      	b.n	8001760 <main+0x3b0>
						case 0xf3:
							potencia2 = rxBuf[3];
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <main+0x4b8>)
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <main+0x4c8>)
 80016f0:	801a      	strh	r2, [r3, #0]
							potencia2 = rxBuf[2] + (potencia2<<8);
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <main+0x4b8>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <main+0x4c8>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <main+0x4c8>)
 8001706:	801a      	strh	r2, [r3, #0]
							flag = 6;
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <main+0x4c0>)
 800170a:	2206      	movs	r2, #6
 800170c:	801a      	strh	r2, [r3, #0]
							break;
 800170e:	e027      	b.n	8001760 <main+0x3b0>
						case 0xf4:
							potencia1 = rxBuf[3];
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <main+0x4b8>)
 8001712:	78db      	ldrb	r3, [r3, #3]
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b59      	ldr	r3, [pc, #356]	; (800187c <main+0x4cc>)
 8001718:	801a      	strh	r2, [r3, #0]
							potencia1 = rxBuf[2] + (potencia1<<8);
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <main+0x4b8>)
 800171c:	789b      	ldrb	r3, [r3, #2]
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b56      	ldr	r3, [pc, #344]	; (800187c <main+0x4cc>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b29b      	uxth	r3, r3
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <main+0x4cc>)
 800172e:	801a      	strh	r2, [r3, #0]
							flag = 7;
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <main+0x4c0>)
 8001732:	2207      	movs	r2, #7
 8001734:	801a      	strh	r2, [r3, #0]
							break;
 8001736:	e013      	b.n	8001760 <main+0x3b0>
						case 0xf5:
							potencia3 = rxBuf[3];
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <main+0x4b8>)
 800173a:	78db      	ldrb	r3, [r3, #3]
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <main+0x4d0>)
 8001740:	801a      	strh	r2, [r3, #0]
							potencia3 = rxBuf[2] + (potencia3<<8);
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <main+0x4b8>)
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <main+0x4d0>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <main+0x4d0>)
 8001756:	801a      	strh	r2, [r3, #0]
							flag = 8;
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <main+0x4c0>)
 800175a:	2208      	movs	r2, #8
 800175c:	801a      	strh	r2, [r3, #0]
							break;
 800175e:	bf00      	nop
						// 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, potencia3);
						// 	}
						// 	flag = 11;
						// 	break;
					}
					rxOK = false;
 8001760:	4b48      	ldr	r3, [pc, #288]	; (8001884 <main+0x4d4>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
				}

				flag = -3;
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <main+0x4c0>)
 8001768:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800176c:	801a      	strh	r2, [r3, #0]

			}
			
			
			HAL_UART_Receive_IT(&huart1, &byteRx, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4945      	ldr	r1, [pc, #276]	; (8001888 <main+0x4d8>)
 8001772:	4846      	ldr	r0, [pc, #280]	; (800188c <main+0x4dc>)
 8001774:	f004 fb5b 	bl	8005e2e <HAL_UART_Receive_IT>

			if(peso < pesoTara) {
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <main+0x4e0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a45      	ldr	r2, [pc, #276]	; (8001894 <main+0x4e4>)
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fc04 	bl	8000f90 <__aeabi_fcmplt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <main+0x3e8>
				pesoMedido = 0;
 800178e:	4b42      	ldr	r3, [pc, #264]	; (8001898 <main+0x4e8>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e01f      	b.n	80017d8 <main+0x428>
			} else {
				pesoMedido = BLOCOCALIBRACAO*((peso-pesoTara)/(pesoPadrao-pesoTara));
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <main+0x4e0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <main+0x4e4>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f94c 	bl	8000a40 <__aeabi_fsub>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461c      	mov	r4, r3
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <main+0x4ec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a38      	ldr	r2, [pc, #224]	; (8001894 <main+0x4e4>)
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f942 	bl	8000a40 <__aeabi_fsub>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fafb 	bl	8000dbc <__aeabi_fdiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <main+0x4f0>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fa42 	bl	8000c54 <__aeabi_fmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <main+0x4e8>)
 80017d6:	601a      	str	r2, [r3, #0]
			}


			switch (page) { // mudei sem o dois
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <main+0x4f4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	f200 8375 	bhi.w	8001ecc <main+0xb1c>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <main+0x438>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001801 	.word	0x08001801
 80017ec:	08001ecd 	.word	0x08001ecd
 80017f0:	08001815 	.word	0x08001815
 80017f4:	08001ecd 	.word	0x08001ecd
 80017f8:	08001e09 	.word	0x08001e09
 80017fc:	08001ecd 	.word	0x08001ecd
				case 0:
					vibrar = false;
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <main+0x4f8>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
					vibrando = false;
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <main+0x4fc>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
					estadoVibracao = 5;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <main+0x500>)
 800180e:	2205      	movs	r2, #5
 8001810:	701a      	strb	r2, [r3, #0]
					break;
 8001812:	e35c      	b.n	8001ece <main+0xb1e>
					break;
				case 2:
					// Página de Operação
					// Enviar Dados de Peso

					pesoSize = conv_toText(str_valorMedido, pesoMedido);
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <main+0x4e8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fbe1 	bl	8000fe0 <__aeabi_f2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29b      	uxth	r3, r3
 8001822:	4619      	mov	r1, r3
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <main+0x504>)
 8001826:	f000 fca1 	bl	800216c <conv_toText>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <main+0x508>)
 8001830:	701a      	strb	r2, [r3, #0]
					TX_Buffer[0]='t';
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <main+0x50c>)
 8001834:	2274      	movs	r2, #116	; 0x74
 8001836:	701a      	strb	r2, [r3, #0]
					TX_Buffer[1]='5';
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <main+0x50c>)
 800183a:	2235      	movs	r2, #53	; 0x35
 800183c:	705a      	strb	r2, [r3, #1]
					TX_Buffer[2]='.';
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <main+0x50c>)
 8001840:	222e      	movs	r2, #46	; 0x2e
 8001842:	709a      	strb	r2, [r3, #2]
					TX_Buffer[3]='t';
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <main+0x50c>)
 8001846:	2274      	movs	r2, #116	; 0x74
 8001848:	70da      	strb	r2, [r3, #3]
					TX_Buffer[4]='x';
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <main+0x50c>)
 800184c:	2278      	movs	r2, #120	; 0x78
 800184e:	711a      	strb	r2, [r3, #4]
					TX_Buffer[5]='t';
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <main+0x50c>)
 8001852:	2274      	movs	r2, #116	; 0x74
 8001854:	715a      	strb	r2, [r3, #5]
					TX_Buffer[6]='=';
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <main+0x50c>)
 8001858:	223d      	movs	r2, #61	; 0x3d
 800185a:	719a      	strb	r2, [r3, #6]
					TX_Buffer[7]='"';
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <main+0x50c>)
 800185e:	2222      	movs	r2, #34	; 0x22
 8001860:	71da      	strb	r2, [r3, #7]

					for(int i = 0; i<pesoSize; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e036      	b.n	80018d6 <main+0x526>
 8001868:	200001bc 	.word	0x200001bc
 800186c:	2000000a 	.word	0x2000000a
 8001870:	20000016 	.word	0x20000016
 8001874:	2000000c 	.word	0x2000000c
 8001878:	20000010 	.word	0x20000010
 800187c:	2000000e 	.word	0x2000000e
 8001880:	20000012 	.word	0x20000012
 8001884:	200000de 	.word	0x200000de
 8001888:	200000dc 	.word	0x200000dc
 800188c:	200002b8 	.word	0x200002b8
 8001890:	200000e0 	.word	0x200000e0
 8001894:	20000000 	.word	0x20000000
 8001898:	2000020c 	.word	0x2000020c
 800189c:	20000004 	.word	0x20000004
 80018a0:	447a0000 	.word	0x447a0000
 80018a4:	200000df 	.word	0x200000df
 80018a8:	200000e4 	.word	0x200000e4
 80018ac:	200000e5 	.word	0x200000e5
 80018b0:	200000e6 	.word	0x200000e6
 80018b4:	20000200 	.word	0x20000200
 80018b8:	20000207 	.word	0x20000207
 80018bc:	200001d4 	.word	0x200001d4
						TX_Buffer[8+i] = str_valorMedido[i];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3308      	adds	r3, #8
 80018c4:	4983      	ldr	r1, [pc, #524]	; (8001ad4 <main+0x724>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	440a      	add	r2, r1
 80018ca:	7811      	ldrb	r1, [r2, #0]
 80018cc:	4a82      	ldr	r2, [pc, #520]	; (8001ad8 <main+0x728>)
 80018ce:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i<pesoSize; i++) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <main+0x72c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4293      	cmp	r3, r2
 80018e0:	dbee      	blt.n	80018c0 <main+0x510>
					}

					TX_Buffer[8+pesoSize]='"';
 80018e2:	4b7e      	ldr	r3, [pc, #504]	; (8001adc <main+0x72c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3308      	adds	r3, #8
 80018e8:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <main+0x728>)
 80018ea:	2122      	movs	r1, #34	; 0x22
 80018ec:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[9+pesoSize]=0xFF;
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <main+0x72c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3309      	adds	r3, #9
 80018f4:	4a78      	ldr	r2, [pc, #480]	; (8001ad8 <main+0x728>)
 80018f6:	21ff      	movs	r1, #255	; 0xff
 80018f8:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[10+pesoSize]=0xFF;
 80018fa:	4b78      	ldr	r3, [pc, #480]	; (8001adc <main+0x72c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	330a      	adds	r3, #10
 8001900:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <main+0x728>)
 8001902:	21ff      	movs	r1, #255	; 0xff
 8001904:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[11+pesoSize]=0xFF;
 8001906:	4b75      	ldr	r3, [pc, #468]	; (8001adc <main+0x72c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	330b      	adds	r3, #11
 800190c:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <main+0x728>)
 800190e:	21ff      	movs	r1, #255	; 0xff
 8001910:	54d1      	strb	r1, [r2, r3]
					txSize = 12+pesoSize;
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <main+0x72c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	330c      	adds	r3, #12
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <main+0x730>)
 800191c:	701a      	strb	r2, [r3, #0]

					if(estadoVibracao == 5) {
 800191e:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <main+0x734>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b05      	cmp	r3, #5
 8001926:	d102      	bne.n	800192e <main+0x57e>
						estadoVibracao = 0;
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <main+0x734>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
					}

	/* ------------------------------------Sart - IHM / Vibration Control-----------------------------------------*/
					timer_diff3 = timer_curr - timer_bfr3;
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <main+0x738>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	4b6e      	ldr	r3, [pc, #440]	; (8001aec <main+0x73c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <main+0x740>)
 800193c:	801a      	strh	r2, [r3, #0]
						

					if(timer_diff3 >= 100) {
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <main+0x740>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	2b63      	cmp	r3, #99	; 0x63
 8001944:	f240 8205 	bls.w	8001d52 <main+0x9a2>

						if (vibrar){ // a cada 100ms o programa verifica o estado de vibração
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <main+0x744>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 81ed 	beq.w	8001d2c <main+0x97c>

							if(!vibrando) {
 8001952:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <main+0x748>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	f083 0301 	eor.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d069      	beq.n	8001a34 <main+0x684>

								// se não estiver vibrando, set PWM em 0
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <main+0x74c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <main+0x74c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
								__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <main+0x74c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
								HAL_Delay(100); //500
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	f001 f84b 	bl	8002a14 <HAL_Delay>

								if(potencia2>0)	{
 800197e:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <main+0x750>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <main+0x606>
									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, round(AJUSTEVIBRACAO * (potencia2/100)));
 8001986:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <main+0x750>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4a5e      	ldr	r2, [pc, #376]	; (8001b04 <main+0x754>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2332      	movs	r3, #50	; 0x32
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd27 	bl	80003f0 <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4955      	ldr	r1, [pc, #340]	; (8001afc <main+0x74c>)
 80019a8:	680c      	ldr	r4, [r1, #0]
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f823 	bl	80009f8 <__aeabi_d2uiz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	63a3      	str	r3, [r4, #56]	; 0x38
								}
								if(potencia1>0) {
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <main+0x758>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d017      	beq.n	80019ee <main+0x63e>
									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,round(AJUSTEVIBRACAO * (potencia1/100)));
 80019be:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <main+0x758>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <main+0x754>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	2332      	movs	r3, #50	; 0x32
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd0b 	bl	80003f0 <__aeabi_i2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4947      	ldr	r1, [pc, #284]	; (8001afc <main+0x74c>)
 80019e0:	680c      	ldr	r4, [r1, #0]
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f807 	bl	80009f8 <__aeabi_d2uiz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6363      	str	r3, [r4, #52]	; 0x34
								}
								if(potencia3>0)	{
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <main+0x75c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d017      	beq.n	8001a26 <main+0x676>
									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, round(AJUSTEVIBRACAO * (potencia3/100)));
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <main+0x75c>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <main+0x754>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	2332      	movs	r3, #50	; 0x32
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fcef 	bl	80003f0 <__aeabi_i2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4939      	ldr	r1, [pc, #228]	; (8001afc <main+0x74c>)
 8001a18:	680c      	ldr	r4, [r1, #0]
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe ffeb 	bl	80009f8 <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	63e3      	str	r3, [r4, #60]	; 0x3c
								}
								
								estadoVibracao = 1;
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <main+0x734>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
								vibrando = true;
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <main+0x748>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e18a      	b.n	8001d4a <main+0x99a>
							} else {
									
								if(pesoMedido > pesoLimite1) { // 
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <main+0x760>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f8b7 	bl	8000bac <__aeabi_i2f>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <main+0x764>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f7ff faa2 	bl	8000f90 <__aeabi_fcmplt>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <main+0x6ce>

									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <main+0x74c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <main+0x74c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
									__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <main+0x74c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	63da      	str	r2, [r3, #60]	; 0x3c
									estadoVibracao = 4;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <main+0x734>)
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	701a      	strb	r2, [r3, #0]
									vibrando = false;
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <main+0x748>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
									vibrar = false;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <main+0x744>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e165      	b.n	8001d4a <main+0x99a>

								} else {
									if(pesoMedido > (pesoLimite3*pesoLimite1)/100.0) {
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <main+0x764>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcc6 	bl	8000414 <__aeabi_f2d>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <main+0x768>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <main+0x760>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fca8 	bl	80003f0 <__aeabi_i2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <main+0x76c>)
 8001aa6:	f7fe fe37 	bl	8000718 <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe ff97 	bl	80009e4 <__aeabi_dcmpgt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d031      	beq.n	8001b20 <main+0x770>
										__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <main+0x74c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
										__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <main+0x74c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
										estadoVibracao = 3;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <main+0x734>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e13a      	b.n	8001d4a <main+0x99a>
 8001ad4:	20000200 	.word	0x20000200
 8001ad8:	200001d4 	.word	0x200001d4
 8001adc:	20000207 	.word	0x20000207
 8001ae0:	200001fc 	.word	0x200001fc
 8001ae4:	200000e6 	.word	0x200000e6
 8001ae8:	200001ba 	.word	0x200001ba
 8001aec:	200001b8 	.word	0x200001b8
 8001af0:	20000216 	.word	0x20000216
 8001af4:	200000e4 	.word	0x200000e4
 8001af8:	200000e5 	.word	0x200000e5
 8001afc:	20000270 	.word	0x20000270
 8001b00:	20000010 	.word	0x20000010
 8001b04:	51eb851f 	.word	0x51eb851f
 8001b08:	2000000e 	.word	0x2000000e
 8001b0c:	20000012 	.word	0x20000012
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000020c 	.word	0x2000020c
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	40590000 	.word	0x40590000
									} else {
										if(estadoVibracao == 3) {
 8001b20:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <main+0x950>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d14a      	bne.n	8001bc0 <main+0x810>
											__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <main+0x954>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
											__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001b32:	4b74      	ldr	r3, [pc, #464]	; (8001d04 <main+0x954>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
											__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <main+0x954>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
											HAL_Delay(100); // mudei 300
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f000 ff66 	bl	8002a14 <HAL_Delay>
											if(potencia1>0)	{
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <main+0x958>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d017      	beq.n	8001b80 <main+0x7d0>
												__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, round(AJUSTEVIBRACAO * (potencia1/100)));
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <main+0x958>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4a6d      	ldr	r2, [pc, #436]	; (8001d0c <main+0x95c>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2332      	movs	r3, #50	; 0x32
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc42 	bl	80003f0 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4964      	ldr	r1, [pc, #400]	; (8001d04 <main+0x954>)
 8001b72:	680c      	ldr	r4, [r1, #0]
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7fe ff3e 	bl	80009f8 <__aeabi_d2uiz>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6363      	str	r3, [r4, #52]	; 0x34
											}
											if(potencia3>0)	{
 8001b80:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <main+0x960>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d017      	beq.n	8001bb8 <main+0x808>
												__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, round(AJUSTEVIBRACAO * (potencia3/100)));
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <main+0x960>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <main+0x95c>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	2332      	movs	r3, #50	; 0x32
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc26 	bl	80003f0 <__aeabi_i2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4956      	ldr	r1, [pc, #344]	; (8001d04 <main+0x954>)
 8001baa:	680c      	ldr	r4, [r1, #0]
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff22 	bl	80009f8 <__aeabi_d2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	63e3      	str	r3, [r4, #60]	; 0x3c
											}
											estadoVibracao = 2;
 8001bb8:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <main+0x950>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e0c4      	b.n	8001d4a <main+0x99a>
										} else {
											if(pesoMedido > (pesoLimite2*pesoLimite1)/100.0) {
 8001bc0:	4b54      	ldr	r3, [pc, #336]	; (8001d14 <main+0x964>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc25 	bl	8000414 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <main+0x968>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <main+0x96c>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc07 	bl	80003f0 <__aeabi_i2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <main+0x970>)
 8001be8:	f7fe fd96 	bl	8000718 <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fef6 	bl	80009e4 <__aeabi_dcmpgt>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <main+0x86a>
												__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <main+0x954>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
												estadoVibracao = 2;
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <main+0x950>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c12:	4844      	ldr	r0, [pc, #272]	; (8001d24 <main+0x974>)
 8001c14:	f002 f9e4 	bl	8003fe0 <HAL_GPIO_WritePin>
 8001c18:	e097      	b.n	8001d4a <main+0x99a>
											} else {
												if(estadoVibracao==2) {
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <main+0x950>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	f040 8092 	bne.w	8001d4a <main+0x99a>
													__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <main+0x954>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
													__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001c2e:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <main+0x954>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
													__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <main+0x954>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c
													HAL_Delay(100); // mudei 300
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	f000 fee8 	bl	8002a14 <HAL_Delay>
													if(potencia2>0)	{
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <main+0x978>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d017      	beq.n	8001c7c <main+0x8cc>
														__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, round(AJUSTEVIBRACAO * (potencia2/100)));
 8001c4c:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <main+0x978>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <main+0x95c>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2332      	movs	r3, #50	; 0x32
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fbc4 	bl	80003f0 <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4925      	ldr	r1, [pc, #148]	; (8001d04 <main+0x954>)
 8001c6e:	680c      	ldr	r4, [r1, #0]
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe fec0 	bl	80009f8 <__aeabi_d2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	63a3      	str	r3, [r4, #56]	; 0x38
													}
													if(potencia1>0)	{
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <main+0x958>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d017      	beq.n	8001cb4 <main+0x904>
														__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, round(AJUSTEVIBRACAO * (potencia1/100)));
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <main+0x958>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <main+0x95c>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	2332      	movs	r3, #50	; 0x32
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fba8 	bl	80003f0 <__aeabi_i2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4917      	ldr	r1, [pc, #92]	; (8001d04 <main+0x954>)
 8001ca6:	680c      	ldr	r4, [r1, #0]
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe fea4 	bl	80009f8 <__aeabi_d2uiz>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	6363      	str	r3, [r4, #52]	; 0x34
													}
													if(potencia3>0)	{
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <main+0x960>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d017      	beq.n	8001cec <main+0x93c>
														__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, round(AJUSTEVIBRACAO * (potencia3/100)));
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <main+0x960>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <main+0x95c>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2332      	movs	r3, #50	; 0x32
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fb8c 	bl	80003f0 <__aeabi_i2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4909      	ldr	r1, [pc, #36]	; (8001d04 <main+0x954>)
 8001cde:	680c      	ldr	r4, [r1, #0]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe fe88 	bl	80009f8 <__aeabi_d2uiz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	63e3      	str	r3, [r4, #60]	; 0x3c
													}
													HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <main+0x974>)
 8001cf4:	f002 f974 	bl	8003fe0 <HAL_GPIO_WritePin>
													estadoVibracao = 1;
 8001cf8:	4b01      	ldr	r3, [pc, #4]	; (8001d00 <main+0x950>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e024      	b.n	8001d4a <main+0x99a>
 8001d00:	200000e6 	.word	0x200000e6
 8001d04:	20000270 	.word	0x20000270
 8001d08:	2000000e 	.word	0x2000000e
 8001d0c:	51eb851f 	.word	0x51eb851f
 8001d10:	20000012 	.word	0x20000012
 8001d14:	2000020c 	.word	0x2000020c
 8001d18:	2000000a 	.word	0x2000000a
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	40590000 	.word	0x40590000
 8001d24:	40011000 	.word	0x40011000
 8001d28:	20000010 	.word	0x20000010
									}
								}
							}
							
						} else {
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001d2c:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <main+0xb24>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <main+0xb24>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <main+0xb24>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
							estadoVibracao = 0;
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <main+0xb28>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
						}


						
						timer_bfr3 = timer_curr;
 8001d4a:	4b64      	ldr	r3, [pc, #400]	; (8001edc <main+0xb2c>)
 8001d4c:	881a      	ldrh	r2, [r3, #0]
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <main+0xb30>)
 8001d50:	801a      	strh	r2, [r3, #0]
					}

	/* ------------------------------------Stop - IHM / Vibration Control-----------------------------------------*/


					TX_Buffer[txSize]='v';
 8001d52:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <main+0xb34>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <main+0xb38>)
 8001d5a:	2176      	movs	r1, #118	; 0x76
 8001d5c:	5499      	strb	r1, [r3, r2]
					TX_Buffer[txSize+1]='a';
 8001d5e:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <main+0xb34>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <main+0xb38>)
 8001d66:	2161      	movs	r1, #97	; 0x61
 8001d68:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+2]='0';
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <main+0xb34>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <main+0xb38>)
 8001d72:	2130      	movs	r1, #48	; 0x30
 8001d74:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+3]='.';
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <main+0xb34>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <main+0xb38>)
 8001d7e:	212e      	movs	r1, #46	; 0x2e
 8001d80:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+4]='v';
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <main+0xb34>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <main+0xb38>)
 8001d8a:	2176      	movs	r1, #118	; 0x76
 8001d8c:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+5]='a';
 8001d8e:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <main+0xb34>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	3305      	adds	r3, #5
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <main+0xb38>)
 8001d96:	2161      	movs	r1, #97	; 0x61
 8001d98:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+6]='l';
 8001d9a:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <main+0xb34>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <main+0xb38>)
 8001da2:	216c      	movs	r1, #108	; 0x6c
 8001da4:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+7]='=';
 8001da6:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <main+0xb34>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3307      	adds	r3, #7
 8001dac:	4a4e      	ldr	r2, [pc, #312]	; (8001ee8 <main+0xb38>)
 8001dae:	213d      	movs	r1, #61	; 0x3d
 8001db0:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+8]= estadoVibracao + '0';
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <main+0xb28>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <main+0xb34>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3308      	adds	r3, #8
 8001dbe:	3230      	adds	r2, #48	; 0x30
 8001dc0:	b2d1      	uxtb	r1, r2
 8001dc2:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <main+0xb38>)
 8001dc4:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+9]=0xFF;
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <main+0xb34>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3309      	adds	r3, #9
 8001dcc:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <main+0xb38>)
 8001dce:	21ff      	movs	r1, #255	; 0xff
 8001dd0:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+10]=0xFF;
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <main+0xb34>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	330a      	adds	r3, #10
 8001dd8:	4a43      	ldr	r2, [pc, #268]	; (8001ee8 <main+0xb38>)
 8001dda:	21ff      	movs	r1, #255	; 0xff
 8001ddc:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[txSize+11]=0xFF;
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <main+0xb34>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	330b      	adds	r3, #11
 8001de4:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <main+0xb38>)
 8001de6:	21ff      	movs	r1, #255	; 0xff
 8001de8:	54d1      	strb	r1, [r2, r3]
					txSize = txSize + 12;
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <main+0xb34>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <main+0xb34>)
 8001df4:	701a      	strb	r2, [r3, #0]

					HAL_UART_Transmit_IT(&huart1, TX_Buffer, txSize);
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <main+0xb34>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	493a      	ldr	r1, [pc, #232]	; (8001ee8 <main+0xb38>)
 8001e00:	483a      	ldr	r0, [pc, #232]	; (8001eec <main+0xb3c>)
 8001e02:	f003 ffdf 	bl	8005dc4 <HAL_UART_Transmit_IT>





					break;
 8001e06:	e062      	b.n	8001ece <main+0xb1e>

				case 3: // Página de Teclado
					break;
				case 4: // Página de Calibração
						// Enviar Dados de Peso
					pesoSize = conv_toText(str_valorMedido, pesoMedido);
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <main+0xb40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f8e7 	bl	8000fe0 <__aeabi_f2uiz>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	4836      	ldr	r0, [pc, #216]	; (8001ef4 <main+0xb44>)
 8001e1a:	f000 f9a7 	bl	800216c <conv_toText>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <main+0xb48>)
 8001e24:	701a      	strb	r2, [r3, #0]
					TX_Buffer[0]='t';
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <main+0xb38>)
 8001e28:	2274      	movs	r2, #116	; 0x74
 8001e2a:	701a      	strb	r2, [r3, #0]
					TX_Buffer[1]='5';
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <main+0xb38>)
 8001e2e:	2235      	movs	r2, #53	; 0x35
 8001e30:	705a      	strb	r2, [r3, #1]
					TX_Buffer[2]='.';
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <main+0xb38>)
 8001e34:	222e      	movs	r2, #46	; 0x2e
 8001e36:	709a      	strb	r2, [r3, #2]
					TX_Buffer[3]='t';
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <main+0xb38>)
 8001e3a:	2274      	movs	r2, #116	; 0x74
 8001e3c:	70da      	strb	r2, [r3, #3]
					TX_Buffer[4]='x';
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <main+0xb38>)
 8001e40:	2278      	movs	r2, #120	; 0x78
 8001e42:	711a      	strb	r2, [r3, #4]
					TX_Buffer[5]='t';
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <main+0xb38>)
 8001e46:	2274      	movs	r2, #116	; 0x74
 8001e48:	715a      	strb	r2, [r3, #5]
					TX_Buffer[6]='=';
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <main+0xb38>)
 8001e4c:	223d      	movs	r2, #61	; 0x3d
 8001e4e:	719a      	strb	r2, [r3, #6]
					TX_Buffer[7]='"';
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <main+0xb38>)
 8001e52:	2222      	movs	r2, #34	; 0x22
 8001e54:	71da      	strb	r2, [r3, #7]

					for(int i = 0; i<pesoSize; i++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	e00a      	b.n	8001e72 <main+0xac2>
						TX_Buffer[8+i] = str_valorMedido[i];
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	4924      	ldr	r1, [pc, #144]	; (8001ef4 <main+0xb44>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	440a      	add	r2, r1
 8001e66:	7811      	ldrb	r1, [r2, #0]
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <main+0xb38>)
 8001e6a:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i<pesoSize; i++) {
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <main+0xb48>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	dbee      	blt.n	8001e5c <main+0xaac>
					}

					TX_Buffer[8+pesoSize]='"';
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <main+0xb48>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3308      	adds	r3, #8
 8001e84:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <main+0xb38>)
 8001e86:	2122      	movs	r1, #34	; 0x22
 8001e88:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[9+pesoSize]=0xFF;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <main+0xb48>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3309      	adds	r3, #9
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <main+0xb38>)
 8001e92:	21ff      	movs	r1, #255	; 0xff
 8001e94:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[10+pesoSize]=0xFF;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <main+0xb48>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	330a      	adds	r3, #10
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <main+0xb38>)
 8001e9e:	21ff      	movs	r1, #255	; 0xff
 8001ea0:	54d1      	strb	r1, [r2, r3]
					TX_Buffer[11+pesoSize]=0xFF;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <main+0xb48>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	330b      	adds	r3, #11
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <main+0xb38>)
 8001eaa:	21ff      	movs	r1, #255	; 0xff
 8001eac:	54d1      	strb	r1, [r2, r3]
					txSize = 12+pesoSize;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <main+0xb48>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <main+0xb34>)
 8001eb8:	701a      	strb	r2, [r3, #0]

					HAL_UART_Transmit_IT(&huart1, TX_Buffer, txSize);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <main+0xb34>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <main+0xb38>)
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <main+0xb3c>)
 8001ec6:	f003 ff7d 	bl	8005dc4 <HAL_UART_Transmit_IT>

					break;
 8001eca:	e000      	b.n	8001ece <main+0xb1e>

				case 5: // Página Logo Capital
					break;
				default:
					break;
 8001ecc:	bf00      	nop
		timer_curr = HAL_GetTick();
 8001ece:	f7ff baa5 	b.w	800141c <main+0x6c>
 8001ed2:	bf00      	nop
 8001ed4:	20000270 	.word	0x20000270
 8001ed8:	200000e6 	.word	0x200000e6
 8001edc:	200001ba 	.word	0x200001ba
 8001ee0:	200001b8 	.word	0x200001b8
 8001ee4:	200001fc 	.word	0x200001fc
 8001ee8:	200001d4 	.word	0x200001d4
 8001eec:	200002b8 	.word	0x200002b8
 8001ef0:	2000020c 	.word	0x2000020c
 8001ef4:	20000200 	.word	0x20000200
 8001ef8:	20000207 	.word	0x20000207

08001efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b094      	sub	sp, #80	; 0x50
 8001f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	2228      	movs	r2, #40	; 0x28
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 fcbc 	bl	8006888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 f88e 	bl	8004074 <HAL_RCC_OscConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f5e:	f000 fa31 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f62:	230f      	movs	r3, #15
 8001f64:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fafa 	bl	8004578 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f8a:	f000 fa1b 	bl	80023c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f96:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fc7a 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001fa6:	f000 fa0d 	bl	80023c4 <Error_Handler>
  }
}
 8001faa:	bf00      	nop
 8001fac:	3750      	adds	r7, #80	; 0x50
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_ADC_ConvCpltCallback+0x20>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d102      	bne.n	8001fca <HAL_ADC_ConvCpltCallback+0x16>
		
		ADC_Complete = true;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]

	}
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	20000040 	.word	0x20000040
 8001fd8:	200000d4 	.word	0x200000d4

08001fdc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
	
	

	if (GPIO_Pin == ZEROCD_Pin)	{ // Detector de Zero
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d103      	bne.n	8001ff4 <HAL_GPIO_EXTI_Callback+0x18>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);  
		 
	}

	if (GPIO_Pin == BOTAO1_Pin) { // Botão I
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ffa:	d117      	bne.n	800202c <HAL_GPIO_EXTI_Callback+0x50>
		// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		if(estadoVibracao == 0 || estadoVibracao == 4) {
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_GPIO_EXTI_Callback+0x34>
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_GPIO_EXTI_Callback+0xa0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b04      	cmp	r3, #4
 800200e:	d10d      	bne.n	800202c <HAL_GPIO_EXTI_Callback+0x50>
			HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	2108      	movs	r1, #8
 8002014:	481a      	ldr	r0, [pc, #104]	; (8002080 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002016:	f001 ffe3 	bl	8003fe0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AUX_GPIO_Port, AUX_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002020:	4818      	ldr	r0, [pc, #96]	; (8002084 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002022:	f001 ffdd 	bl	8003fe0 <HAL_GPIO_WritePin>
			motor = true;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_GPIO_EXTI_Callback+0xac>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == BOTAO2_Pin) { // Botão II
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}

	if(GPIO_Pin == SI1_Pin) { //Sendor Indutivo I
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002032:	d104      	bne.n	800203e <HAL_GPIO_EXTI_Callback+0x62>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002038:	4814      	ldr	r0, [pc, #80]	; (800208c <HAL_GPIO_EXTI_Callback+0xb0>)
 800203a:	f001 ffe9 	bl	8004010 <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
	}

	if(GPIO_Pin == SI2_Pin)	{ // Sensor Indutivo II
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002044:	d113      	bne.n	800206e <HAL_GPIO_EXTI_Callback+0x92>
		si2 = true;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2108      	movs	r1, #8
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002052:	f001 ffc5 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AUX_GPIO_Port, AUX_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_GPIO_EXTI_Callback+0xa8>)
 800205e:	f001 ffbf 	bl	8003fe0 <HAL_GPIO_WritePin>
		vibrar = true;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		motor = false;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_GPIO_EXTI_Callback+0xac>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
	}
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000270 	.word	0x20000270
 800207c:	200000e6 	.word	0x200000e6
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40010800 	.word	0x40010800
 8002088:	20000208 	.word	0x20000208
 800208c:	40011000 	.word	0x40011000
 8002090:	20000210 	.word	0x20000210
 8002094:	200000e4 	.word	0x200000e4

08002098 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80020aa:	f000 fc97 	bl	80029dc <HAL_IncTick>
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM4) {

	}
	/* USER CODE END Callback 1 */
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40012c00 	.word	0x40012c00

080020bc <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	txOK = true;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_UART_TxCpltCallback+0x18>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	200000dd 	.word	0x200000dd

080020d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_UART_RxCpltCallback+0x74>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12c      	bne.n	8002144 <HAL_UART_RxCpltCallback+0x6c>
  	{
		buffer[rxIndex] = byteRx;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_RxCpltCallback+0x7c>)
 80020f2:	7819      	ldrb	r1, [r3, #0]
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_UART_RxCpltCallback+0x80>)
 80020f6:	5499      	strb	r1, [r3, r2]
		rxIndex++;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 8002102:	701a      	strb	r2, [r3, #0]

		if(byteRx == delimiter) {
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_UART_RxCpltCallback+0x7c>)
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_UART_RxCpltCallback+0x84>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d10d      	bne.n	800212c <HAL_UART_RxCpltCallback+0x54>
			memcpy(rxBuf, buffer, sizeof(buffer));
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_UART_RxCpltCallback+0x88>)
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_UART_RxCpltCallback+0x80>)
 8002114:	ca07      	ldmia	r2, {r0, r1, r2}
 8002116:	c303      	stmia	r3!, {r0, r1}
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	3302      	adds	r3, #2
 800211c:	0c12      	lsrs	r2, r2, #16
 800211e:	701a      	strb	r2, [r3, #0]
			rxOK=true;
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_UART_RxCpltCallback+0x8c>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
			rxIndex=0;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
		}
		

		if (rxIndex > sizeof(buffer)) 
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b0b      	cmp	r3, #11
 8002132:	d902      	bls.n	800213a <HAL_UART_RxCpltCallback+0x62>

        {
            rxIndex = 0; 
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_UART_RxCpltCallback+0x78>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
        }

		HAL_UART_Receive_IT(&huart1, &byteRx, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	4905      	ldr	r1, [pc, #20]	; (8002154 <HAL_UART_RxCpltCallback+0x7c>)
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <HAL_UART_RxCpltCallback+0x90>)
 8002140:	f003 fe75 	bl	8005e2e <HAL_UART_Receive_IT>


  	}
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013800 	.word	0x40013800
 8002150:	200001d3 	.word	0x200001d3
 8002154:	200000dc 	.word	0x200000dc
 8002158:	200001c8 	.word	0x200001c8
 800215c:	20000014 	.word	0x20000014
 8002160:	200001bc 	.word	0x200001bc
 8002164:	200000de 	.word	0x200000de
 8002168:	200002b8 	.word	0x200002b8

0800216c <conv_toText>:

uint8_t conv_toText(uint8_t *str, uint16_t valor) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
				str[2] = 'E';
				str[1] = '-';
				str[0] = '-';
				return 7;
	} else {
		if(valor < 10){
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	2b09      	cmp	r3, #9
 800217c:	d811      	bhi.n	80021a2 <conv_toText+0x36>
			str[0] = (uint8_t)(valor%10) + '0';
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <conv_toText+0x248>)
 8002182:	fba3 1302 	umull	r1, r3, r3, r2
 8002186:	08d9      	lsrs	r1, r3, #3
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3330      	adds	r3, #48	; 0x30
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	701a      	strb	r2, [r3, #0]
			return 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	e103      	b.n	80023aa <conv_toText+0x23e>
		} else{
			if(valor < 100){
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	2b63      	cmp	r3, #99	; 0x63
 80021a6:	d81d      	bhi.n	80021e4 <conv_toText+0x78>
				str[1] = (uint8_t)(valor%10) + '0';
 80021a8:	887a      	ldrh	r2, [r7, #2]
 80021aa:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <conv_toText+0x248>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	08d9      	lsrs	r1, r3, #3
 80021b2:	460b      	mov	r3, r1
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	3230      	adds	r2, #48	; 0x30
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
				str[0] = (uint8_t)(valor/10) + '0';
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	4a79      	ldr	r2, [pc, #484]	; (80023b4 <conv_toText+0x248>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3330      	adds	r3, #48	; 0x30
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	701a      	strb	r2, [r3, #0]
				return 2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0e2      	b.n	80023aa <conv_toText+0x23e>
			} else {
				if(valor < 1000) {
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ea:	d232      	bcs.n	8002252 <conv_toText+0xe6>
					str[2] = (uint8_t)(valor%10) + '0';
 80021ec:	887a      	ldrh	r2, [r7, #2]
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <conv_toText+0x248>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	08d9      	lsrs	r1, r3, #3
 80021f6:	460b      	mov	r3, r1
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2da      	uxtb	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3302      	adds	r3, #2
 8002208:	3230      	adds	r2, #48	; 0x30
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
					str[1] = (uint8_t)((valor%100)/10) + '0';
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <conv_toText+0x24c>)
 8002212:	fba2 1203 	umull	r1, r2, r2, r3
 8002216:	0952      	lsrs	r2, r2, #5
 8002218:	2164      	movs	r1, #100	; 0x64
 800221a:	fb01 f202 	mul.w	r2, r1, r2
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	4a64      	ldr	r2, [pc, #400]	; (80023b4 <conv_toText+0x248>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	b29b      	uxth	r3, r3
 800222c:	b2da      	uxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3301      	adds	r3, #1
 8002232:	3230      	adds	r2, #48	; 0x30
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]
					str[0] = (uint8_t)(valor/100) + '0';
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4a5f      	ldr	r2, [pc, #380]	; (80023b8 <conv_toText+0x24c>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	b29b      	uxth	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3330      	adds	r3, #48	; 0x30
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	701a      	strb	r2, [r3, #0]
					return 3;
 800224e:	2303      	movs	r3, #3
 8002250:	e0ab      	b.n	80023aa <conv_toText+0x23e>
				} else {
					if(valor < 10000)	{
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	f242 720f 	movw	r2, #9999	; 0x270f
 8002258:	4293      	cmp	r3, r2
 800225a:	d848      	bhi.n	80022ee <conv_toText+0x182>
						str[3] = (uint8_t)(valor%10) + '0';
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <conv_toText+0x248>)
 8002260:	fba3 1302 	umull	r1, r3, r3, r2
 8002264:	08d9      	lsrs	r1, r3, #3
 8002266:	460b      	mov	r3, r1
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3303      	adds	r3, #3
 8002278:	3230      	adds	r2, #48	; 0x30
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
						str[2] = (uint8_t)((valor%100)/10) + '0';
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	4a4d      	ldr	r2, [pc, #308]	; (80023b8 <conv_toText+0x24c>)
 8002282:	fba2 1203 	umull	r1, r2, r2, r3
 8002286:	0952      	lsrs	r2, r2, #5
 8002288:	2164      	movs	r1, #100	; 0x64
 800228a:	fb01 f202 	mul.w	r2, r1, r2
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	4a48      	ldr	r2, [pc, #288]	; (80023b4 <conv_toText+0x248>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	b29b      	uxth	r3, r3
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3302      	adds	r3, #2
 80022a2:	3230      	adds	r2, #48	; 0x30
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
						str[1] = (uint8_t)((valor%1000)/100) + '0';
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	4a44      	ldr	r2, [pc, #272]	; (80023bc <conv_toText+0x250>)
 80022ac:	fba2 1203 	umull	r1, r2, r2, r3
 80022b0:	0992      	lsrs	r2, r2, #6
 80022b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022b6:	fb01 f202 	mul.w	r2, r1, r2
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <conv_toText+0x24c>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3301      	adds	r3, #1
 80022ce:	3230      	adds	r2, #48	; 0x30
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
						str[0] = (uint8_t)(valor/1000) + '0';
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4a39      	ldr	r2, [pc, #228]	; (80023bc <conv_toText+0x250>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3330      	adds	r3, #48	; 0x30
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	701a      	strb	r2, [r3, #0]
						return 4;
 80022ea:	2304      	movs	r3, #4
 80022ec:	e05d      	b.n	80023aa <conv_toText+0x23e>
					} else {
						str[4] = (uint8_t)(valor%10) + '0';
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <conv_toText+0x248>)
 80022f2:	fba3 1302 	umull	r1, r3, r3, r2
 80022f6:	08d9      	lsrs	r1, r3, #3
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	b2da      	uxtb	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	3230      	adds	r2, #48	; 0x30
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
						str[3] = (uint8_t)((valor%100)/10) + '0';
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <conv_toText+0x24c>)
 8002314:	fba2 1203 	umull	r1, r2, r2, r3
 8002318:	0952      	lsrs	r2, r2, #5
 800231a:	2164      	movs	r1, #100	; 0x64
 800231c:	fb01 f202 	mul.w	r2, r1, r2
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <conv_toText+0x248>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2da      	uxtb	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3303      	adds	r3, #3
 8002334:	3230      	adds	r2, #48	; 0x30
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
						str[2] = (uint8_t)((valor%1000)/100) + '0';
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <conv_toText+0x250>)
 800233e:	fba2 1203 	umull	r1, r2, r2, r3
 8002342:	0992      	lsrs	r2, r2, #6
 8002344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002348:	fb01 f202 	mul.w	r2, r1, r2
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <conv_toText+0x24c>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b29b      	uxth	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3302      	adds	r3, #2
 8002360:	3230      	adds	r2, #48	; 0x30
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
						str[1] = (uint8_t)((valor%10000)/1000) + '0';
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <conv_toText+0x254>)
 800236a:	fba2 1203 	umull	r1, r2, r2, r3
 800236e:	0b52      	lsrs	r2, r2, #13
 8002370:	f242 7110 	movw	r1, #10000	; 0x2710
 8002374:	fb01 f202 	mul.w	r2, r1, r2
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <conv_toText+0x250>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3301      	adds	r3, #1
 800238c:	3230      	adds	r2, #48	; 0x30
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
						str[0] = (uint8_t)(valor/10000) + '0';
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <conv_toText+0x254>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0b5b      	lsrs	r3, r3, #13
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3330      	adds	r3, #48	; 0x30
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	701a      	strb	r2, [r3, #0]
						return 5;
 80023a8:	2305      	movs	r3, #5
					}
				}
			}
		}
	}
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	cccccccd 	.word	0xcccccccd
 80023b8:	51eb851f 	.word	0x51eb851f
 80023bc:	10624dd3 	.word	0x10624dd3
 80023c0:	d1b71759 	.word	0xd1b71759

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>
	...

080023d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <MX_SPI1_Init+0x64>)
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <MX_SPI1_Init+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <MX_SPI1_Init+0x64>)
 80023dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <MX_SPI1_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <MX_SPI1_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <MX_SPI1_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <MX_SPI1_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_SPI1_Init+0x64>)
 80023fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002400:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <MX_SPI1_Init+0x64>)
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <MX_SPI1_Init+0x64>)
 800241c:	220a      	movs	r2, #10
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <MX_SPI1_Init+0x64>)
 8002422:	f002 fba3 	bl	8004b6c <HAL_SPI_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800242c:	f7ff ffca 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000218 	.word	0x20000218
 8002438:	40013000 	.word	0x40013000

0800243c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_SPI_MspInit+0x98>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d137      	bne.n	80024cc <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 8002462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_SPI_MspInit+0x9c>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800248c:	23a0      	movs	r3, #160	; 0xa0
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	480f      	ldr	r0, [pc, #60]	; (80024dc <HAL_SPI_MspInit+0xa0>)
 80024a0:	f001 fc1a 	bl	8003cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	4809      	ldr	r0, [pc, #36]	; (80024dc <HAL_SPI_MspInit+0xa0>)
 80024b8:	f001 fc0e 	bl	8003cd8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2023      	movs	r0, #35	; 0x23
 80024c2:	f001 f930 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024c6:	2023      	movs	r0, #35	; 0x23
 80024c8:	f001 f949 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013000 	.word	0x40013000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010800 	.word	0x40010800

080024e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_MspInit+0x5c>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_MspInit+0x5c>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6193      	str	r3, [r2, #24]
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_MspInit+0x5c>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_MspInit+0x5c>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_MspInit+0x5c>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_MspInit+0x5c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_MspInit+0x60>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_MspInit+0x60>)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258a:	f000 fa27 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA1_Channel1_IRQHandler+0x10>)
 800259a:	f001 fa69 	bl	8003a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000070 	.word	0x20000070

080025a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <ADC1_2_IRQHandler+0x10>)
 80025ae:	f000 fc57 	bl	8002e60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000040 	.word	0x20000040

080025bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZEROCD_Pin);
 80025c0:	2020      	movs	r0, #32
 80025c2:	f001 fd3f 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <TIM4_IRQHandler+0x10>)
 80025d2:	f002 fddd 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000270 	.word	0x20000270

080025e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <SPI1_IRQHandler+0x10>)
 80025e6:	f002 fb45 	bl	8004c74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000218 	.word	0x20000218

080025f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <USART1_IRQHandler+0x10>)
 80025fa:	f003 fc3d 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200002b8 	.word	0x200002b8

08002608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SI1_Pin);
 800260c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002610:	f001 fd18 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SI2_Pin);
 8002614:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002618:	f001 fd14 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTAO2_Pin);
 800261c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002620:	f001 fd10 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTAO1_Pin);
 8002624:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002628:	f001 fd0c 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	615a      	str	r2, [r3, #20]
 800266a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <MX_TIM4_Init+0x110>)
 800266e:	4a38      	ldr	r2, [pc, #224]	; (8002750 <MX_TIM4_Init+0x114>)
 8002670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <MX_TIM4_Init+0x110>)
 8002674:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002678:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b34      	ldr	r3, [pc, #208]	; (800274c <MX_TIM4_Init+0x110>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 166;
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <MX_TIM4_Init+0x110>)
 8002682:	22a6      	movs	r2, #166	; 0xa6
 8002684:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <MX_TIM4_Init+0x110>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <MX_TIM4_Init+0x110>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002692:	482e      	ldr	r0, [pc, #184]	; (800274c <MX_TIM4_Init+0x110>)
 8002694:	f002 fbe9 	bl	8004e6a <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800269e:	f7ff fe91 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ac:	4619      	mov	r1, r3
 80026ae:	4827      	ldr	r0, [pc, #156]	; (800274c <MX_TIM4_Init+0x110>)
 80026b0:	f002 ff38 	bl	8005524 <HAL_TIM_ConfigClockSource>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80026ba:	f7ff fe83 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026be:	4823      	ldr	r0, [pc, #140]	; (800274c <MX_TIM4_Init+0x110>)
 80026c0:	f002 fc6c 	bl	8004f9c <HAL_TIM_PWM_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80026ca:	f7ff fe7b 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	4619      	mov	r1, r3
 80026dc:	481b      	ldr	r0, [pc, #108]	; (800274c <MX_TIM4_Init+0x110>)
 80026de:	f003 fab1 	bl	8005c44 <HAL_TIMEx_MasterConfigSynchronization>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80026e8:	f7ff fe6c 	bl	80023c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ec:	2360      	movs	r3, #96	; 0x60
 80026ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2200      	movs	r2, #0
 8002700:	4619      	mov	r1, r3
 8002702:	4812      	ldr	r0, [pc, #72]	; (800274c <MX_TIM4_Init+0x110>)
 8002704:	f002 fe4c 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800270e:	f7ff fe59 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2204      	movs	r2, #4
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <MX_TIM4_Init+0x110>)
 800271a:	f002 fe41 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002724:	f7ff fe4e 	bl	80023c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2208      	movs	r2, #8
 800272c:	4619      	mov	r1, r3
 800272e:	4807      	ldr	r0, [pc, #28]	; (800274c <MX_TIM4_Init+0x110>)
 8002730:	f002 fe36 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800273a:	f7ff fe43 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800273e:	4803      	ldr	r0, [pc, #12]	; (800274c <MX_TIM4_Init+0x110>)
 8002740:	f000 f82e 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 8002744:	bf00      	nop
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000270 	.word	0x20000270
 8002750:	40000800 	.word	0x40000800

08002754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_TIM_Base_MspInit+0x44>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d113      	bne.n	800278e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_TIM_Base_MspInit+0x48>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_TIM_Base_MspInit+0x48>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_TIM_Base_MspInit+0x48>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	201e      	movs	r0, #30
 8002784:	f000 ffcf 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002788:	201e      	movs	r0, #30
 800278a:	f000 ffe8 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40000800 	.word	0x40000800
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_TIM_MspPostInit+0x5c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d118      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = EL1_Pin|EL2_Pin|EL3_Pin;
 80027d8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80027dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_TIM_MspPostInit+0x64>)
 80027ee:	f001 fa73 	bl	8003cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40000800 	.word	0x40000800
 8002800:	40021000 	.word	0x40021000
 8002804:	40010c00 	.word	0x40010c00

08002808 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART1_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002840:	f003 fa70 	bl	8005d24 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f7ff fdbb 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200002b8 	.word	0x200002b8
 8002858:	40013800 	.word	0x40013800

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_UART_MspInit+0x9c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d139      	bne.n	80028f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_UART_MspInit+0xa0>)
 8002882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_UART_MspInit+0xa0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_UART_MspInit+0xa0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4619      	mov	r1, r3
 80028c0:	480f      	ldr	r0, [pc, #60]	; (8002900 <HAL_UART_MspInit+0xa4>)
 80028c2:	f001 fa09 	bl	8003cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4619      	mov	r1, r3
 80028da:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_UART_MspInit+0xa4>)
 80028dc:	f001 f9fc 	bl	8003cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	2025      	movs	r0, #37	; 0x25
 80028e6:	f000 ff1e 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ea:	2025      	movs	r0, #37	; 0x25
 80028ec:	f000 ff37 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010800 	.word	0x40010800

08002904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002904:	f7ff fe94 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480b      	ldr	r0, [pc, #44]	; (8002938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800290a:	490c      	ldr	r1, [pc, #48]	; (800293c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002920:	4c09      	ldr	r4, [pc, #36]	; (8002948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800292e:	f003 ffb3 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002932:	f7fe fd3d 	bl	80013b0 <main>
  bx lr
 8002936:	4770      	bx	lr
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002940:	08006940 	.word	0x08006940
  ldr r2, =_sbss
 8002944:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002948:	20000304 	.word	0x20000304

0800294c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <CAN1_RX1_IRQHandler>
	...

08002950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_Init+0x28>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_Init+0x28>)
 800295a:	f043 0310 	orr.w	r3, r3, #16
 800295e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 fed5 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	200f      	movs	r0, #15
 8002968:	f000 f808 	bl	800297c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f7ff fdb8 	bl	80024e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x54>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x58>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002992:	fbb3 f3f1 	udiv	r3, r3, r1
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 feed 	bl	800377a <HAL_SYSTICK_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00e      	b.n	80029c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d80a      	bhi.n	80029c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f000 feb5 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_InitTick+0x5c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000018 	.word	0x20000018
 80029d4:	20000020 	.word	0x20000020
 80029d8:	2000001c 	.word	0x2000001c

080029dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x1c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x20>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x20>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000020 	.word	0x20000020
 80029fc:	20000300 	.word	0x20000300

08002a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_GetTick+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000300 	.word	0x20000300

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_Delay+0x44>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffe0 	bl	8002a00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000020 	.word	0x20000020

08002a5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0be      	b.n	8002bfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fb2a 	bl	80010f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fc09 	bl	80032b8 <ADC_ConversionStop_Disable>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8099 	bne.w	8002bea <HAL_ADC_Init+0x18e>
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8095 	bne.w	8002bea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac8:	f023 0302 	bic.w	r3, r3, #2
 8002acc:	f043 0202 	orr.w	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002adc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7b1b      	ldrb	r3, [r3, #12]
 8002ae2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ae4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d003      	beq.n	8002afe <HAL_ADC_Init+0xa2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d102      	bne.n	8002b04 <HAL_ADC_Init+0xa8>
 8002afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b02:	e000      	b.n	8002b06 <HAL_ADC_Init+0xaa>
 8002b04:	2300      	movs	r3, #0
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7d1b      	ldrb	r3, [r3, #20]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d119      	bne.n	8002b48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7b1b      	ldrb	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	035a      	lsls	r2, r3, #13
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e00b      	b.n	8002b48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_ADC_Init+0x1a8>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d003      	beq.n	8002b82 <HAL_ADC_Init+0x126>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d104      	bne.n	8002b8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_ADC_Init+0x1ac>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d10b      	bne.n	8002bc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc6:	e018      	b.n	8002bfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f023 0312 	bic.w	r3, r3, #18
 8002bd0:	f043 0210 	orr.w	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	ffe1f7fd 	.word	0xffe1f7fd
 8002c08:	ff1f0efe 	.word	0xff1f0efe

08002c0c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a64      	ldr	r2, [pc, #400]	; (8002db4 <HAL_ADC_Start_DMA+0x1a8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_ADC_Start_DMA+0x24>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <HAL_ADC_Start_DMA+0x1ac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_Start_DMA+0x32>
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <HAL_ADC_Start_DMA+0x1a8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80b3 	bne.w	8002da4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x40>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0ae      	b.n	8002daa <HAL_ADC_Start_DMA+0x19e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fad5 	bl	8003204 <ADC_Enable>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 809a 	bne.w	8002d9a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a4e      	ldr	r2, [pc, #312]	; (8002db8 <HAL_ADC_Start_DMA+0x1ac>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_Start_DMA+0x84>
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_ADC_Start_DMA+0x1a8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d115      	bne.n	8002cbc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d026      	beq.n	8002cf8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cba:	e01d      	b.n	8002cf8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_ADC_Start_DMA+0x1a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADC_Start_DMA+0xd0>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a38      	ldr	r2, [pc, #224]	; (8002db8 <HAL_ADC_Start_DMA+0x1ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10d      	bne.n	8002cf8 <HAL_ADC_Start_DMA+0xec>
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <HAL_ADC_Start_DMA+0x1a8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f023 0206 	bic.w	r2, r3, #6
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <HAL_ADC_Start_DMA+0x1b0>)
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_ADC_Start_DMA+0x1b4>)
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_ADC_Start_DMA+0x1b8>)
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0202 	mvn.w	r2, #2
 8002d40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d50:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a18      	ldr	r0, [r3, #32]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	334c      	adds	r3, #76	; 0x4c
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f000 fd71 	bl	8003848 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d74:	d108      	bne.n	8002d88 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d84:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d86:	e00f      	b.n	8002da8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d96:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d98:	e006      	b.n	8002da8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40012400 	.word	0x40012400
 8002db8:	40012800 	.word	0x40012800
 8002dbc:	0800333b 	.word	0x0800333b
 8002dc0:	080033b7 	.word	0x080033b7
 8002dc4:	080033d3 	.word	0x080033d3

08002dc8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Stop_DMA+0x1a>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e03a      	b.n	8002e58 <HAL_ADC_Stop_DMA+0x90>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa64 	bl	80032b8 <ADC_ConversionStop_Disable>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d129      	bne.n	8002e4e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d11a      	bne.n	8002e4e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd73 	bl	8003908 <HAL_DMA_Abort>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e40:	e005      	b.n	8002e4e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03e      	beq.n	8002f00 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d039      	beq.n	8002f00 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eb2:	d11d      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d119      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0220 	bic.w	r2, r2, #32
 8002eca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff f85f 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0212 	mvn.w	r2, #18
 8002efe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04d      	beq.n	8002fa6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d048      	beq.n	8002fa6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002f36:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002f3a:	d012      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d125      	bne.n	8002f96 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f54:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f58:	d11d      	bne.n	8002f96 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fae4 	bl	8003564 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 020c 	mvn.w	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f812 	bl	8002ff0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0201 	mvn.w	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x20>
 8003030:	2302      	movs	r3, #2
 8003032:	e0dc      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1da>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b06      	cmp	r3, #6
 8003042:	d81c      	bhi.n	800307e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	221f      	movs	r2, #31
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b05      	subs	r3, #5
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
 800307c:	e03c      	b.n	80030f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d81c      	bhi.n	80030c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b23      	subs	r3, #35	; 0x23
 8003098:	221f      	movs	r2, #31
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	4019      	ands	r1, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	3b23      	subs	r3, #35	; 0x23
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
 80030be:	e01b      	b.n	80030f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b41      	subs	r3, #65	; 0x41
 80030d2:	221f      	movs	r2, #31
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4019      	ands	r1, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b41      	subs	r3, #65	; 0x41
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d91c      	bls.n	800313a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	3b1e      	subs	r3, #30
 8003112:	2207      	movs	r2, #7
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6898      	ldr	r0, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	3b1e      	subs	r3, #30
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	e019      	b.n	800316e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	2207      	movs	r2, #7
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	4019      	ands	r1, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6898      	ldr	r0, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b10      	cmp	r3, #16
 8003174:	d003      	beq.n	800317e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800317a:	2b11      	cmp	r3, #17
 800317c:	d132      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d125      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d126      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d11a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_ADC_ConfigChannel+0x1e8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_ADC_ConfigChannel+0x1ec>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9a      	lsrs	r2, r3, #18
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x1b2>
 80031d2:	e007      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40012400 	.word	0x40012400
 80031fc:	20000018 	.word	0x20000018
 8003200:	431bde83 	.word	0x431bde83

08003204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d040      	beq.n	80032a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <ADC_Enable+0xac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <ADC_Enable+0xb0>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003240:	e002      	b.n	8003248 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800324e:	f7ff fbd7 	bl	8002a00 <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003254:	e01f      	b.n	8003296 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003256:	f7ff fbd3 	bl	8002a00 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d918      	bls.n	8003296 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d011      	beq.n	8003296 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e007      	b.n	80032a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d1d8      	bne.n	8003256 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000018 	.word	0x20000018
 80032b4:	431bde83 	.word	0x431bde83

080032b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d12e      	bne.n	8003330 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e2:	f7ff fb8d 	bl	8002a00 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032e8:	e01b      	b.n	8003322 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ea:	f7ff fb89 	bl	8002a00 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d914      	bls.n	8003322 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10d      	bne.n	8003322 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d0dc      	beq.n	80032ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d127      	bne.n	80033a4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800336a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800336e:	d115      	bne.n	800339c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003374:	2b00      	cmp	r3, #0
 8003376:	d111      	bne.n	800339c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f7fe fe09 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80033a2:	e004      	b.n	80033ae <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff fe0a 	bl	8002fde <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff fe02 	bl	8003002 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_ADCEx_Calibration_Start+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e097      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff42 	bl	80032b8 <ADC_ConversionStop_Disable>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fee3 	bl	8003204 <ADC_Enable>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8081 	bne.w	800354c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003452:	f023 0302 	bic.w	r3, r3, #2
 8003456:	f043 0202 	orr.w	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800345e:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_ADCEx_Calibration_Start+0x158>)
 8003460:	681c      	ldr	r4, [r3, #0]
 8003462:	2002      	movs	r0, #2
 8003464:	f001 facc 	bl	8004a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8003468:	4603      	mov	r3, r0
 800346a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800346e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003470:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003472:	e002      	b.n	800347a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f9      	bne.n	8003474 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003490:	f7ff fab6 	bl	8002a00 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003496:	e01b      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003498:	f7ff fab2 	bl	8002a00 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d914      	bls.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f023 0312 	bic.w	r3, r3, #18
 80034bc:	f043 0210 	orr.w	r2, r3, #16
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e042      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1dc      	bne.n	8003498 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034ee:	f7ff fa87 	bl	8002a00 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034f4:	e01b      	b.n	800352e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034f6:	f7ff fa83 	bl	8002a00 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d914      	bls.n	800352e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f023 0312 	bic.w	r3, r3, #18
 800351a:	f043 0210 	orr.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e013      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1dc      	bne.n	80034f6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	20000018 	.word	0x20000018

08003564 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <__NVIC_EnableIRQ+0x34>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff90 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff2d 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff42 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff35 	bl	80035dc <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e043      	b.n	8003832 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_DMA_Init+0xa8>)
 80037b2:	4413      	add	r3, r2
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_DMA_Init+0xac>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <HAL_DMA_Init+0xb0>)
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	bffdfff8 	.word	0xbffdfff8
 8003840:	cccccccd 	.word	0xcccccccd
 8003844:	40020000 	.word	0x40020000

08003848 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_DMA_Start_IT+0x20>
 8003864:	2302      	movs	r3, #2
 8003866:	e04b      	b.n	8003900 <HAL_DMA_Start_IT+0xb8>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d13a      	bne.n	80038f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f9eb 	bl	8003c7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 020e 	orr.w	r2, r2, #14
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e00f      	b.n	80038e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 020a 	orr.w	r2, r2, #10
 80038de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e005      	b.n	80038fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
 80038fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d008      	beq.n	8003932 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e020      	b.n	8003974 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 020e 	bic.w	r2, r2, #14
 8003940:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
	...

08003980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d005      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2204      	movs	r2, #4
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	e051      	b.n	8003a48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 020e 	bic.w	r2, r2, #14
 80039b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_DMA_Abort_IT+0xd4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d029      	beq.n	8003a22 <HAL_DMA_Abort_IT+0xa2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_DMA_Abort_IT+0xd8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_Abort_IT+0x9e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_DMA_Abort_IT+0xdc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01a      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x98>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_DMA_Abort_IT+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d012      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x92>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_DMA_Abort_IT+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00a      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x8c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_DMA_Abort_IT+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d102      	bne.n	8003a06 <HAL_DMA_Abort_IT+0x86>
 8003a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a04:	e00e      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0a:	e00b      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a10:	e008      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a16:	e005      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1c:	e002      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a1e:	2310      	movs	r3, #16
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <HAL_DMA_Abort_IT+0xec>)
 8003a26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
    } 
  }
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020008 	.word	0x40020008
 8003a58:	4002001c 	.word	0x4002001c
 8003a5c:	40020030 	.word	0x40020030
 8003a60:	40020044 	.word	0x40020044
 8003a64:	40020058 	.word	0x40020058
 8003a68:	4002006c 	.word	0x4002006c
 8003a6c:	40020000 	.word	0x40020000

08003a70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d04f      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xc8>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04a      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_DMA_IRQHandler+0x1f0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d029      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <HAL_DMA_IRQHandler+0x1f4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMA_IRQHandler+0xaa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_DMA_IRQHandler+0x1f8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01a      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xa4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a62      	ldr	r2, [pc, #392]	; (8003c6c <HAL_DMA_IRQHandler+0x1fc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d012      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x9e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a60      	ldr	r2, [pc, #384]	; (8003c70 <HAL_DMA_IRQHandler+0x200>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x98>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5f      	ldr	r2, [pc, #380]	; (8003c74 <HAL_DMA_IRQHandler+0x204>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d102      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x92>
 8003afc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b00:	e00e      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b06:	e00b      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b0c:	e008      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b12:	e005      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b18:	e002      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b1a:	2340      	movs	r3, #64	; 0x40
 8003b1c:	e000      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb0>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <HAL_DMA_IRQHandler+0x208>)
 8003b22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8094 	beq.w	8003c56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b36:	e08e      	b.n	8003c56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d056      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x186>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d051      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020a 	bic.w	r2, r2, #10
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_DMA_IRQHandler+0x1f0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d029      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x166>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_DMA_IRQHandler+0x1f4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x162>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a35      	ldr	r2, [pc, #212]	; (8003c68 <HAL_DMA_IRQHandler+0x1f8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01a      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x15c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <HAL_DMA_IRQHandler+0x1fc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d012      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x156>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a32      	ldr	r2, [pc, #200]	; (8003c70 <HAL_DMA_IRQHandler+0x200>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x150>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_DMA_IRQHandler+0x204>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d102      	bne.n	8003bba <HAL_DMA_IRQHandler+0x14a>
 8003bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bb8:	e00e      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bbe:	e00b      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc4:	e008      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bca:	e005      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd0:	e002      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	e000      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x168>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <HAL_DMA_IRQHandler+0x208>)
 8003bda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d034      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bf4:	e02f      	b.n	8003c56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x1e8>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 020e 	bic.w	r2, r2, #14
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
    }
  }
  return;
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
}
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40020008 	.word	0x40020008
 8003c64:	4002001c 	.word	0x4002001c
 8003c68:	40020030 	.word	0x40020030
 8003c6c:	40020044 	.word	0x40020044
 8003c70:	40020058 	.word	0x40020058
 8003c74:	4002006c 	.word	0x4002006c
 8003c78:	40020000 	.word	0x40020000

08003c7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d108      	bne.n	8003cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cba:	e007      	b.n	8003ccc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b08b      	sub	sp, #44	; 0x2c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	e169      	b.n	8003fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cec:	2201      	movs	r2, #1
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f040 8158 	bne.w	8003fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4a9a      	ldr	r2, [pc, #616]	; (8003f78 <HAL_GPIO_Init+0x2a0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d05e      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d14:	4a98      	ldr	r2, [pc, #608]	; (8003f78 <HAL_GPIO_Init+0x2a0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d875      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d1a:	4a98      	ldr	r2, [pc, #608]	; (8003f7c <HAL_GPIO_Init+0x2a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d058      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d20:	4a96      	ldr	r2, [pc, #600]	; (8003f7c <HAL_GPIO_Init+0x2a4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d86f      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d26:	4a96      	ldr	r2, [pc, #600]	; (8003f80 <HAL_GPIO_Init+0x2a8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d052      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d2c:	4a94      	ldr	r2, [pc, #592]	; (8003f80 <HAL_GPIO_Init+0x2a8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d869      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d32:	4a94      	ldr	r2, [pc, #592]	; (8003f84 <HAL_GPIO_Init+0x2ac>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d04c      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d38:	4a92      	ldr	r2, [pc, #584]	; (8003f84 <HAL_GPIO_Init+0x2ac>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d863      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d3e:	4a92      	ldr	r2, [pc, #584]	; (8003f88 <HAL_GPIO_Init+0x2b0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d046      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d44:	4a90      	ldr	r2, [pc, #576]	; (8003f88 <HAL_GPIO_Init+0x2b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d85d      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d4a:	2b12      	cmp	r3, #18
 8003d4c:	d82a      	bhi.n	8003da4 <HAL_GPIO_Init+0xcc>
 8003d4e:	2b12      	cmp	r3, #18
 8003d50:	d859      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_GPIO_Init+0x80>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003dd3 	.word	0x08003dd3
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dbf 	.word	0x08003dbf
 8003d64:	08003e01 	.word	0x08003e01
 8003d68:	08003e07 	.word	0x08003e07
 8003d6c:	08003e07 	.word	0x08003e07
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003e07 	.word	0x08003e07
 8003d78:	08003e07 	.word	0x08003e07
 8003d7c:	08003e07 	.word	0x08003e07
 8003d80:	08003e07 	.word	0x08003e07
 8003d84:	08003e07 	.word	0x08003e07
 8003d88:	08003e07 	.word	0x08003e07
 8003d8c:	08003e07 	.word	0x08003e07
 8003d90:	08003e07 	.word	0x08003e07
 8003d94:	08003e07 	.word	0x08003e07
 8003d98:	08003e07 	.word	0x08003e07
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_GPIO_Init+0x2b4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003daa:	e02c      	b.n	8003e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	623b      	str	r3, [r7, #32]
          break;
 8003db2:	e029      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	3304      	adds	r3, #4
 8003dba:	623b      	str	r3, [r7, #32]
          break;
 8003dbc:	e024      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	623b      	str	r3, [r7, #32]
          break;
 8003dc6:	e01f      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	623b      	str	r3, [r7, #32]
          break;
 8003dd0:	e01a      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	623b      	str	r3, [r7, #32]
          break;
 8003dde:	e013      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003de8:	2308      	movs	r3, #8
 8003dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	611a      	str	r2, [r3, #16]
          break;
 8003df2:	e009      	b.n	8003e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df4:	2308      	movs	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	615a      	str	r2, [r3, #20]
          break;
 8003dfe:	e003      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
          break;
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          break;
 8003e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2bff      	cmp	r3, #255	; 0xff
 8003e0c:	d801      	bhi.n	8003e12 <HAL_GPIO_Init+0x13a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e001      	b.n	8003e16 <HAL_GPIO_Init+0x13e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d802      	bhi.n	8003e24 <HAL_GPIO_Init+0x14c>
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_Init+0x152>
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	3b08      	subs	r3, #8
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	210f      	movs	r1, #15
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80b1 	beq.w	8003fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e58:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4a4c      	ldr	r2, [pc, #304]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6193      	str	r3, [r2, #24]
 8003e64:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e70:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2bc>)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	3302      	adds	r3, #2
 8003e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	220f      	movs	r2, #15
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <HAL_GPIO_Init+0x2c0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_GPIO_Init+0x1ec>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <HAL_GPIO_Init+0x2c4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_GPIO_Init+0x1e8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <HAL_GPIO_Init+0x2c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <HAL_GPIO_Init+0x1e4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <HAL_GPIO_Init+0x2cc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_GPIO_Init+0x1e0>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e004      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e002      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	f002 0203 	and.w	r2, r2, #3
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	4093      	lsls	r3, r2
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ed6:	492f      	ldr	r1, [pc, #188]	; (8003f94 <HAL_GPIO_Init+0x2bc>)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	3302      	adds	r3, #2
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	492c      	ldr	r1, [pc, #176]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
 8003efc:	e006      	b.n	8003f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	4928      	ldr	r1, [pc, #160]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4922      	ldr	r1, [pc, #136]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60cb      	str	r3, [r1, #12]
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4918      	ldr	r1, [pc, #96]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4914      	ldr	r1, [pc, #80]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d021      	beq.n	8003fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
 8003f74:	e021      	b.n	8003fba <HAL_GPIO_Init+0x2e2>
 8003f76:	bf00      	nop
 8003f78:	10320000 	.word	0x10320000
 8003f7c:	10310000 	.word	0x10310000
 8003f80:	10220000 	.word	0x10220000
 8003f84:	10210000 	.word	0x10210000
 8003f88:	10120000 	.word	0x10120000
 8003f8c:	10110000 	.word	0x10110000
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010800 	.word	0x40010800
 8003f9c:	40010c00 	.word	0x40010c00
 8003fa0:	40011000 	.word	0x40011000
 8003fa4:	40011400 	.word	0x40011400
 8003fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_GPIO_Init+0x304>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <HAL_GPIO_Init+0x304>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f47f ae8e 	bne.w	8003cec <HAL_GPIO_Init+0x14>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	372c      	adds	r7, #44	; 0x2c
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
 8003fec:	4613      	mov	r3, r2
 8003fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ff0:	787b      	ldrb	r3, [r7, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ffc:	e003      	b.n	8004006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	041a      	lsls	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	611a      	str	r2, [r3, #16]
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43d9      	mvns	r1, r3
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	400b      	ands	r3, r1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	611a      	str	r2, [r3, #16]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
	...

08004044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd ffba 	bl	8001fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40010400 	.word	0x40010400

08004074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e272      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8087 	beq.w	80041a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004094:	4b92      	ldr	r3, [pc, #584]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b04      	cmp	r3, #4
 800409e:	d00c      	beq.n	80040ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040a0:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d112      	bne.n	80040d2 <HAL_RCC_OscConfig+0x5e>
 80040ac:	4b8c      	ldr	r3, [pc, #560]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d10b      	bne.n	80040d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ba:	4b89      	ldr	r3, [pc, #548]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x12c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d168      	bne.n	80041a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e24c      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x76>
 80040dc:	4b80      	ldr	r3, [pc, #512]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7f      	ldr	r2, [pc, #508]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e02e      	b.n	8004148 <HAL_RCC_OscConfig+0xd4>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x98>
 80040f2:	4b7b      	ldr	r3, [pc, #492]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b78      	ldr	r3, [pc, #480]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a77      	ldr	r2, [pc, #476]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xd4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0xbc>
 8004116:	4b72      	ldr	r3, [pc, #456]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a71      	ldr	r2, [pc, #452]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b6f      	ldr	r3, [pc, #444]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6e      	ldr	r2, [pc, #440]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xd4>
 8004130:	4b6b      	ldr	r3, [pc, #428]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6a      	ldr	r2, [pc, #424]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a67      	ldr	r2, [pc, #412]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fc56 	bl	8002a00 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe fc52 	bl	8002a00 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e200      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xe4>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe fc42 	bl	8002a00 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7fe fc3e 	bl	8002a00 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1ec      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x10c>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d063      	beq.n	8004276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ae:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041ba:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11c      	bne.n	8004200 <HAL_RCC_OscConfig+0x18c>
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x176>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1c0      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4939      	ldr	r1, [pc, #228]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	e03a      	b.n	8004276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fe fbf7 	bl	8002a00 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004216:	f7fe fbf3 	bl	8002a00 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1a1      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4927      	ldr	r1, [pc, #156]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fe fbd6 	bl	8002a00 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004258:	f7fe fbd2 	bl	8002a00 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e180      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03a      	beq.n	80042f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d019      	beq.n	80042be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <HAL_RCC_OscConfig+0x274>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fe fbb6 	bl	8002a00 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe fbb2 	bl	8002a00 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e160      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042b6:	2001      	movs	r0, #1
 80042b8:	f000 face 	bl	8004858 <RCC_Delay>
 80042bc:	e01c      	b.n	80042f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_OscConfig+0x274>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c4:	f7fe fb9c 	bl	8002a00 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ca:	e00f      	b.n	80042ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fe fb98 	bl	8002a00 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d908      	bls.n	80042ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e146      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	42420000 	.word	0x42420000
 80042e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b92      	ldr	r3, [pc, #584]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e9      	bne.n	80042cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a6 	beq.w	8004452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b88      	ldr	r3, [pc, #544]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4a87      	ldr	r2, [pc, #540]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	61d3      	str	r3, [r2, #28]
 8004322:	4b85      	ldr	r3, [pc, #532]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCC_OscConfig+0x4c8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x4c8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7e      	ldr	r2, [pc, #504]	; (800453c <HAL_RCC_OscConfig+0x4c8>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fe fb59 	bl	8002a00 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fe fb55 	bl	8002a00 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b64      	cmp	r3, #100	; 0x64
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e103      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	4b75      	ldr	r3, [pc, #468]	; (800453c <HAL_RCC_OscConfig+0x4c8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x312>
 8004378:	4b6f      	ldr	r3, [pc, #444]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4a6e      	ldr	r2, [pc, #440]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6213      	str	r3, [r2, #32]
 8004384:	e02d      	b.n	80043e2 <HAL_RCC_OscConfig+0x36e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x334>
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	e01c      	b.n	80043e2 <HAL_RCC_OscConfig+0x36e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d10c      	bne.n	80043ca <HAL_RCC_OscConfig+0x356>
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a60      	ldr	r2, [pc, #384]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	f043 0304 	orr.w	r3, r3, #4
 80043ba:	6213      	str	r3, [r2, #32]
 80043bc:	4b5e      	ldr	r3, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	6213      	str	r3, [r2, #32]
 80043c8:	e00b      	b.n	80043e2 <HAL_RCC_OscConfig+0x36e>
 80043ca:	4b5b      	ldr	r3, [pc, #364]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a5a      	ldr	r2, [pc, #360]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6213      	str	r3, [r2, #32]
 80043d6:	4b58      	ldr	r3, [pc, #352]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	f023 0304 	bic.w	r3, r3, #4
 80043e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d015      	beq.n	8004416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ea:	f7fe fb09 	bl	8002a00 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fe fb05 	bl	8002a00 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e0b1      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ee      	beq.n	80043f2 <HAL_RCC_OscConfig+0x37e>
 8004414:	e014      	b.n	8004440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004416:	f7fe faf3 	bl	8002a00 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fe faef 	bl	8002a00 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e09b      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	4b40      	ldr	r3, [pc, #256]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ee      	bne.n	800441e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004446:	4b3c      	ldr	r3, [pc, #240]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8087 	beq.w	800456a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d061      	beq.n	800452c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d146      	bne.n	80044fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004470:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_RCC_OscConfig+0x4cc>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fe fac3 	bl	8002a00 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe fabf 	bl	8002a00 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e06d      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004490:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d108      	bne.n	80044b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	4921      	ldr	r1, [pc, #132]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b8:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a19      	ldr	r1, [r3, #32]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	430b      	orrs	r3, r1
 80044ca:	491b      	ldr	r1, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x4cc>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fa93 	bl	8002a00 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fe fa8f 	bl	8002a00 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e03d      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x46a>
 80044fc:	e035      	b.n	800456a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCC_OscConfig+0x4cc>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fa7c 	bl	8002a00 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fa78 	bl	8002a00 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e026      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x498>
 800452a:	e01e      	b.n	800456a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e019      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
 8004538:	40021000 	.word	0x40021000
 800453c:	40007000 	.word	0x40007000
 8004540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x500>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	429a      	cmp	r2, r3
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000

08004578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0d0      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d910      	bls.n	80045bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 0207 	bic.w	r2, r3, #7
 80045a2:	4965      	ldr	r1, [pc, #404]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0b8      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a58      	ldr	r2, [pc, #352]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ec:	4b53      	ldr	r3, [pc, #332]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	494d      	ldr	r1, [pc, #308]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d040      	beq.n	8004698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e07f      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004636:	4b41      	ldr	r3, [pc, #260]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e073      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004646:	4b3d      	ldr	r3, [pc, #244]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06b      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004656:	4b39      	ldr	r3, [pc, #228]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4936      	ldr	r1, [pc, #216]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004668:	f7fe f9ca 	bl	8002a00 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fe f9c6 	bl	8002a00 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e053      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 020c 	and.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	429a      	cmp	r2, r3
 8004696:	d1eb      	bne.n	8004670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d210      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 0207 	bic.w	r2, r3, #7
 80046ae:	4922      	ldr	r1, [pc, #136]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e032      	b.n	800472e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4916      	ldr	r1, [pc, #88]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004706:	f000 f821 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800470a:	4602      	mov	r2, r0
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	490a      	ldr	r1, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x1cc>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_ClockConfig+0x1d0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe f928 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40022000 	.word	0x40022000
 800473c:	40021000 	.word	0x40021000
 8004740:	080068f8 	.word	0x080068f8
 8004744:	20000018 	.word	0x20000018
 8004748:	2000001c 	.word	0x2000001c

0800474c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b04      	cmp	r3, #4
 8004774:	d002      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x30>
 8004776:	2b08      	cmp	r3, #8
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x36>
 800477a:	e027      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800477e:	613b      	str	r3, [r7, #16]
      break;
 8004780:	e027      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	0c9b      	lsrs	r3, r3, #18
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800478c:	5cd3      	ldrb	r3, [r2, r3]
 800478e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	0c5b      	lsrs	r3, r3, #17
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	4a11      	ldr	r2, [pc, #68]	; (80047ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80047a6:	5cd3      	ldrb	r3, [r2, r3]
 80047a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ae:	fb03 f202 	mul.w	r2, r3, r2
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e004      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	613b      	str	r3, [r7, #16]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ce:	613b      	str	r3, [r7, #16]
      break;
 80047d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d2:	693b      	ldr	r3, [r7, #16]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	007a1200 	.word	0x007a1200
 80047e8:	08006910 	.word	0x08006910
 80047ec:	08006920 	.word	0x08006920
 80047f0:	003d0900 	.word	0x003d0900

080047f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b02      	ldr	r3, [pc, #8]	; (8004804 <HAL_RCC_GetHCLKFreq+0x10>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	20000018 	.word	0x20000018

08004808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800480c:	f7ff fff2 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_GetPCLK1Freq+0x24>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	08006908 	.word	0x08006908

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004834:	f7ff ffde 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0adb      	lsrs	r3, r3, #11
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	08006908 	.word	0x08006908

08004858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <RCC_Delay+0x34>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <RCC_Delay+0x38>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0a5b      	lsrs	r3, r3, #9
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004874:	bf00      	nop
  }
  while (Delay --);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	60fa      	str	r2, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f9      	bne.n	8004874 <RCC_Delay+0x1c>
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	20000018 	.word	0x20000018
 8004890:	10624dd3 	.word	0x10624dd3

08004894 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d07d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4a4b      	ldr	r2, [pc, #300]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	61d3      	str	r3, [r2, #28]
 80048cc:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d118      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e8:	4b43      	ldr	r3, [pc, #268]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f4:	f7fe f884 	bl	8002a00 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	e008      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fe f880 	bl	8002a00 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e06d      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02e      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d027      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004938:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004942:	4b2e      	ldr	r3, [pc, #184]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004948:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800494e:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d014      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fe f84f 	bl	8002a00 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe f84b 	bl	8002a00 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e036      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ee      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004988:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4917      	ldr	r1, [pc, #92]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	4313      	orrs	r3, r2
 8004998:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a0:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4904      	ldr	r1, [pc, #16]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42420440 	.word	0x42420440

08004a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	f200 808a 	bhi.w	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d045      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d075      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a36:	e082      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a3e:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d07b      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	0c9b      	lsrs	r3, r3, #18
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	4a41      	ldr	r2, [pc, #260]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a54:	5cd3      	ldrb	r3, [r2, r3]
 8004a56:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a62:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	0c5b      	lsrs	r3, r3, #17
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a7c:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	e004      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4a34      	ldr	r2, [pc, #208]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a98:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa4:	d102      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	61bb      	str	r3, [r7, #24]
      break;
 8004aaa:	e04a      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
      break;
 8004aba:	e042      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004acc:	d108      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e01f      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004af8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e00f      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b0a:	d11c      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004b18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b1c:	61bb      	str	r3, [r7, #24]
      break;
 8004b1e:	e012      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b20:	e011      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b22:	f7ff fe85 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8004b26:	4602      	mov	r2, r0
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0b9b      	lsrs	r3, r3, #14
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	3301      	adds	r3, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	61bb      	str	r3, [r7, #24]
      break;
 8004b3c:	e004      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b46:	bf00      	nop
    }
  }
  return (frequency);
 8004b48:	69bb      	ldr	r3, [r7, #24]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
 8004b58:	08006924 	.word	0x08006924
 8004b5c:	08006934 	.word	0x08006934
 8004b60:	007a1200 	.word	0x007a1200
 8004b64:	003d0900 	.word	0x003d0900
 8004b68:	aaaaaaab 	.word	0xaaaaaaab

08004b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e076      	b.n	8004c6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d009      	beq.n	8004ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	61da      	str	r2, [r3, #28]
 8004b96:	e005      	b.n	8004ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fc3c 	bl	800243c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	ea42 0103 	orr.w	r1, r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	0c1a      	lsrs	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f002 0204 	and.w	r2, r2, #4
 8004c4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10e      	bne.n	8004cb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
    return;
 8004cb2:	e0b7      	b.n	8004e24 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x5e>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    return;
 8004cd0:	e0a8      	b.n	8004e24 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <HAL_SPI_IRQHandler+0x74>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 809e 	beq.w	8004e24 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8098 	beq.w	8004e24 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d011      	beq.n	8004d2e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	e00b      	b.n	8004d46 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
        return;
 8004d44:	e06e      	b.n	8004e24 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d014      	beq.n	8004d7a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04f      	beq.n	8004e22 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_SPI_IRQHandler+0x13a>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d034      	beq.n	8004e18 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0203 	bic.w	r2, r2, #3
 8004dbc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d011      	beq.n	8004dea <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_SPI_IRQHandler+0x1b8>)
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fdd4 	bl	8003980 <HAL_DMA_Abort_IT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d016      	beq.n	8004e20 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df6:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <HAL_SPI_IRQHandler+0x1b8>)
 8004df8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe fdbe 	bl	8003980 <HAL_DMA_Abort_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e16:	e003      	b.n	8004e20 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f809 	bl	8004e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e1e:	e000      	b.n	8004e22 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004e20:	bf00      	nop
    return;
 8004e22:	bf00      	nop
  }
}
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	08004e43 	.word	0x08004e43

08004e30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ffe7 	bl	8004e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e041      	b.n	8004f00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fd fc5f 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 fc27 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e032      	b.n	8004f86 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <HAL_TIM_Base_Start+0x88>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <HAL_TIM_Base_Start+0x8c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_TIM_Base_Start+0x90>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d111      	bne.n	8004f74 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d010      	beq.n	8004f84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	e007      	b.n	8004f84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800

08004f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e041      	b.n	8005032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f839 	bl	800503a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fb8e 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIM_PWM_Start+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_PWM_Start+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e05e      	b.n	800517c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd7c 	bl	8005bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_PWM_Start+0x138>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d107      	bne.n	800511e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800511c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIM_PWM_Start+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005130:	d009      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <HAL_TIM_PWM_Start+0x13c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIM_PWM_Start+0xfa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_TIM_PWM_Start+0x140>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b06      	cmp	r3, #6
 8005156:	d010      	beq.n	800517a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	e007      	b.n	800517a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800

08005190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0202 	mvn.w	r2, #2
 80051bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa76 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa69 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa78 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0204 	mvn.w	r2, #4
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa4c 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa3f 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fa4e 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0208 	mvn.w	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa22 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa15 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fa24 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0210 	mvn.w	r2, #16
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9f8 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9eb 	bl	80056b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9fa 	bl	80056d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0201 	mvn.w	r2, #1
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc fec2 	bl	8002098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fce9 	bl	8005d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9be 	bl	80056e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fcb4 	bl	8005d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e0ae      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	f200 809f 	bhi.w	800550c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005409 	.word	0x08005409
 80053d8:	0800550d 	.word	0x0800550d
 80053dc:	0800550d 	.word	0x0800550d
 80053e0:	0800550d 	.word	0x0800550d
 80053e4:	08005449 	.word	0x08005449
 80053e8:	0800550d 	.word	0x0800550d
 80053ec:	0800550d 	.word	0x0800550d
 80053f0:	0800550d 	.word	0x0800550d
 80053f4:	0800548b 	.word	0x0800548b
 80053f8:	0800550d 	.word	0x0800550d
 80053fc:	0800550d 	.word	0x0800550d
 8005400:	0800550d 	.word	0x0800550d
 8005404:	080054cb 	.word	0x080054cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f9d6 	bl	80057c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	619a      	str	r2, [r3, #24]
      break;
 8005446:	e064      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fa1c 	bl	800588c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
      break;
 8005488:	e043      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fa65 	bl	8005960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0208 	orr.w	r2, r2, #8
 80054a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0204 	bic.w	r2, r2, #4
 80054b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
      break;
 80054c8:	e023      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 faaf 	bl	8005a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	61da      	str	r2, [r3, #28]
      break;
 800550a:	e002      	b.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIM_ConfigClockSource+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e0b4      	b.n	80056aa <HAL_TIM_ConfigClockSource+0x186>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005578:	d03e      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xd4>
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557e:	f200 8087 	bhi.w	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	f000 8086 	beq.w	8005696 <HAL_TIM_ConfigClockSource+0x172>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d87f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b70      	cmp	r3, #112	; 0x70
 8005592:	d01a      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0xa6>
 8005594:	2b70      	cmp	r3, #112	; 0x70
 8005596:	d87b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b60      	cmp	r3, #96	; 0x60
 800559a:	d050      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x11a>
 800559c:	2b60      	cmp	r3, #96	; 0x60
 800559e:	d877      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b50      	cmp	r3, #80	; 0x50
 80055a2:	d03c      	beq.n	800561e <HAL_TIM_ConfigClockSource+0xfa>
 80055a4:	2b50      	cmp	r3, #80	; 0x50
 80055a6:	d873      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d058      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x13a>
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d86f      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b30      	cmp	r3, #48	; 0x30
 80055b2:	d064      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	2b30      	cmp	r3, #48	; 0x30
 80055b6:	d86b      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d060      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d867      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d05a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	e062      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	f000 faf0 	bl	8005bbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e04f      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	f000 fad9 	bl	8005bbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800561a:	609a      	str	r2, [r3, #8]
      break;
 800561c:	e03c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fa50 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2150      	movs	r1, #80	; 0x50
 8005636:	4618      	mov	r0, r3
 8005638:	f000 faa7 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 800563c:	e02c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800564a:	461a      	mov	r2, r3
 800564c:	f000 fa6e 	bl	8005b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2160      	movs	r1, #96	; 0x60
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fa97 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 800565c:	e01c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fa30 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2140      	movs	r1, #64	; 0x40
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fa87 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 800567c:	e00c      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fa7e 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 800568e:	e003      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e000      	b.n	8005698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
	...

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <TIM_Base_SetConfig+0xb8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0x30>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0x30>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <TIM_Base_SetConfig+0xbc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0x30>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a25      	ldr	r2, [pc, #148]	; (80057bc <TIM_Base_SetConfig+0xc0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <TIM_Base_SetConfig+0xb8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <TIM_Base_SetConfig+0xbc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x62>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <TIM_Base_SetConfig+0xc0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <TIM_Base_SetConfig+0xb8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d103      	bne.n	80057a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	615a      	str	r2, [r3, #20]
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800

080057c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f023 0201 	bic.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <TIM_OC1_SetConfig+0xc8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d10c      	bne.n	8005836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0308 	bic.w	r3, r3, #8
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <TIM_OC1_SetConfig+0xc8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00

0800588c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f023 0210 	bic.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0320 	bic.w	r3, r3, #32
 80058d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a1d      	ldr	r2, [pc, #116]	; (800595c <TIM_OC2_SetConfig+0xd0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d10d      	bne.n	8005908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a14      	ldr	r2, [pc, #80]	; (800595c <TIM_OC2_SetConfig+0xd0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d113      	bne.n	8005938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	40012c00 	.word	0x40012c00

08005960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <TIM_OC3_SetConfig+0xd0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10d      	bne.n	80059da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <TIM_OC3_SetConfig+0xd0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d113      	bne.n	8005a0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40012c00 	.word	0x40012c00

08005a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0f      	ldr	r2, [pc, #60]	; (8005acc <TIM_OC4_SetConfig+0x98>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00

08005ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 030a 	bic.w	r3, r3, #10
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0210 	bic.w	r2, r3, #16
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	031b      	lsls	r3, r3, #12
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	609a      	str	r2, [r3, #8]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	2201      	movs	r2, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1a      	ldr	r2, [r3, #32]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	401a      	ands	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	431a      	orrs	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e046      	b.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800

08005d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e042      	b.n	8005dbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc fd86 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fcff 	bl	800676c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d121      	bne.n	8005e22 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_UART_Transmit_IT+0x26>
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01a      	b.n	8005e24 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2221      	movs	r2, #33	; 0x21
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e1c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d112      	bne.n	8005e6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_UART_Receive_IT+0x26>
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e00b      	b.n	8005e70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 faad 	bl	80063c4 <UART_Start_Receive_IT>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0ba      	sub	sp, #232	; 0xe8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb8a 	bl	80065f0 <UART_Receive_IT>
      return;
 8005edc:	e25b      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80de 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d1 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	f043 0208 	orr.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81f2 	beq.w	800638c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb15 	bl	80065f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x17a>
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04f      	beq.n	8006092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa1f 	bl	8006436 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d041      	beq.n	800608a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800603e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800604a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	4a7e      	ldr	r2, [pc, #504]	; (8006258 <HAL_UART_IRQHandler+0x3e0>)
 8006060:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fc8a 	bl	8003980 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00e      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f98a 	bl	800639c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00a      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f986 	bl	800639c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f982 	bl	800639c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800609e:	e175      	b.n	800638c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	bf00      	nop
    return;
 80060a2:	e173      	b.n	800638c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f040 814f 	bne.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8148 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8141 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80b6 	beq.w	800625c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8145 	beq.w	8006390 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800610a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610e:	429a      	cmp	r2, r3
 8006110:	f080 813e 	bcs.w	8006390 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b20      	cmp	r3, #32
 8006124:	f000 8088 	beq.w	8006238 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800613e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006154:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006160:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800616c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1d9      	bne.n	8006128 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006198:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800619c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006208:	f023 0310 	bic.w	r3, r3, #16
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800621a:	65ba      	str	r2, [r7, #88]	; 0x58
 800621c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd fb68 	bl	8003908 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006246:	b29b      	uxth	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8ad 	bl	80063ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006254:	e09c      	b.n	8006390 <HAL_UART_IRQHandler+0x518>
 8006256:	bf00      	nop
 8006258:	080064fb 	.word	0x080064fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 808e 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8089 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062a6:	647a      	str	r2, [r7, #68]	; 0x44
 80062a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062de:	633a      	str	r2, [r7, #48]	; 0x30
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	617b      	str	r3, [r7, #20]
   return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e3      	bne.n	8006300 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f832 	bl	80063ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634a:	e023      	b.n	8006394 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8dc 	bl	8006522 <UART_Transmit_IT>
    return;
 800636a:	e014      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f91b 	bl	80065c0 <UART_EndTransmit_IT>
    return;
 800638a:	e004      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    return;
 800638c:	bf00      	nop
 800638e:	e002      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006394:	bf00      	nop
  }
}
 8006396:	37e8      	adds	r7, #232	; 0xe8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2222      	movs	r2, #34	; 0x22
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006408:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0220 	orr.w	r2, r2, #32
 8006428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006436:	b480      	push	{r7}
 8006438:	b095      	sub	sp, #84	; 0x54
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800645e:	643a      	str	r2, [r7, #64]	; 0x40
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	61fb      	str	r3, [r7, #28]
   return(result);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	64bb      	str	r3, [r7, #72]	; 0x48
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e5      	bne.n	8006472 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d119      	bne.n	80064e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ce:	61ba      	str	r2, [r7, #24]
 80064d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	613b      	str	r3, [r7, #16]
   return(result);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064f0:	bf00      	nop
 80064f2:	3754      	adds	r7, #84	; 0x54
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff ff41 	bl	800639c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b21      	cmp	r3, #33	; 0x21
 8006534:	d13e      	bne.n	80065b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800653e:	d114      	bne.n	800656a <UART_Transmit_IT+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d110      	bne.n	800656a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	e008      	b.n	800657c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6211      	str	r1, [r2, #32]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29b      	uxth	r3, r3
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800659e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb fd6b 	bl	80020bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	; 0x30
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b22      	cmp	r3, #34	; 0x22
 8006602:	f040 80ae 	bne.w	8006762 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d117      	bne.n	8006640 <UART_Receive_IT+0x50>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d113      	bne.n	8006640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	b29a      	uxth	r2, r3
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	629a      	str	r2, [r3, #40]	; 0x28
 800663e:	e026      	b.n	800668e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d007      	beq.n	8006664 <UART_Receive_IT+0x74>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <UART_Receive_IT+0x82>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e008      	b.n	8006684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667e:	b2da      	uxtb	r2, r3
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29b      	uxth	r3, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	4619      	mov	r1, r3
 800669c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d15d      	bne.n	800675e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0220 	bic.w	r2, r2, #32
 80066b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d135      	bne.n	8006754 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	613b      	str	r3, [r7, #16]
   return(result);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 0310 	bic.w	r3, r3, #16
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	623a      	str	r2, [r7, #32]
 8006710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	69f9      	ldr	r1, [r7, #28]
 8006714:	6a3a      	ldr	r2, [r7, #32]
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	61bb      	str	r3, [r7, #24]
   return(result);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b10      	cmp	r3, #16
 800672e:	d10a      	bne.n	8006746 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fe2e 	bl	80063ae <HAL_UARTEx_RxEventCallback>
 8006752:	e002      	b.n	800675a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fb fcbf 	bl	80020d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	e002      	b.n	8006764 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	4618      	mov	r0, r3
 8006766:	3730      	adds	r7, #48	; 0x30
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80067a6:	f023 030c 	bic.w	r3, r3, #12
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2c      	ldr	r2, [pc, #176]	; (8006880 <UART_SetConfig+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d103      	bne.n	80067dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe f82c 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	e002      	b.n	80067e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fe f814 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80067e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	4a22      	ldr	r2, [pc, #136]	; (8006884 <UART_SetConfig+0x118>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	0119      	lsls	r1, r3, #4
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009a      	lsls	r2, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	fbb2 f2f3 	udiv	r2, r2, r3
 8006818:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <UART_SetConfig+0x118>)
 800681a:	fba3 0302 	umull	r0, r3, r3, r2
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2064      	movs	r0, #100	; 0x64
 8006822:	fb00 f303 	mul.w	r3, r0, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	3332      	adds	r3, #50	; 0x32
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <UART_SetConfig+0x118>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006838:	4419      	add	r1, r3
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009a      	lsls	r2, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <UART_SetConfig+0x118>)
 8006852:	fba3 0302 	umull	r0, r3, r3, r2
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2064      	movs	r0, #100	; 0x64
 800685a:	fb00 f303 	mul.w	r3, r0, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	3332      	adds	r3, #50	; 0x32
 8006864:	4a07      	ldr	r2, [pc, #28]	; (8006884 <UART_SetConfig+0x118>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	440a      	add	r2, r1
 8006876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40013800 	.word	0x40013800
 8006884:	51eb851f 	.word	0x51eb851f

08006888 <memset>:
 8006888:	4603      	mov	r3, r0
 800688a:	4402      	add	r2, r0
 800688c:	4293      	cmp	r3, r2
 800688e:	d100      	bne.n	8006892 <memset+0xa>
 8006890:	4770      	bx	lr
 8006892:	f803 1b01 	strb.w	r1, [r3], #1
 8006896:	e7f9      	b.n	800688c <memset+0x4>

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	2600      	movs	r6, #0
 800689c:	4d0c      	ldr	r5, [pc, #48]	; (80068d0 <__libc_init_array+0x38>)
 800689e:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 80068a0:	1b64      	subs	r4, r4, r5
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	f000 f81a 	bl	80068e0 <_init>
 80068ac:	2600      	movs	r6, #0
 80068ae:	4d0a      	ldr	r5, [pc, #40]	; (80068d8 <__libc_init_array+0x40>)
 80068b0:	4c0a      	ldr	r4, [pc, #40]	; (80068dc <__libc_init_array+0x44>)
 80068b2:	1b64      	subs	r4, r4, r5
 80068b4:	10a4      	asrs	r4, r4, #2
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08006938 	.word	0x08006938
 80068d4:	08006938 	.word	0x08006938
 80068d8:	08006938 	.word	0x08006938
 80068dc:	0800693c 	.word	0x0800693c

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
